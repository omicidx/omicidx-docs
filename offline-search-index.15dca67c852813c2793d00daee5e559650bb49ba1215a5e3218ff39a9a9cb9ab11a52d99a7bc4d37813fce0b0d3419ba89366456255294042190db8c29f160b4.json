[{"body":"So you've got a new Hugo website with Docsy, now it's time to add some content! This page tells you how to use the theme to add and structure your site content.\nContent root directory You add content for your site under the content root directory of your Hugo site project - either content/ or a language-specific root like content/en/. The main exception here is static files that you don't want built into your site: you can find out more about where you add these below in Adding static content. The files in your content root directory are typically grouped in subdirectories corresponding to your site's sections and templates, which we'll look at in Content sections and templates.\nYou can find out more about Hugo directory structure in Directory Structure Explained.\nContent sections and templates Hugo builds your site pages using the content files you provide plus any templates provided by your site's theme. These templates (or \u0026ldquo;layouts\u0026rdquo; in Hugo terminology) include things like your page's headers, footers, navigation, and links to stylesheets: essentially, everything except your page's specific content. The templates in turn can be made up of partials: little reusable snippets of HTML for page elements like headers, search boxes, and more.\nBecause most technical documentation sites have different sections for different types of content, the Docsy theme comes with the following templates for top-level site sections that you might need:\n docs is for pages in your site's Documentation section. blog is for pages in your site's Blog. community is for your site's Community page.  It also provides a default \u0026ldquo;landing page\u0026rdquo; type of template with the site header and footer, but no left nav, that you can use for any other section. In this site and our example site it's used for the site home page and the About page.\nEach top-level section in your site corresponds to a directory in your site content root. Hugo automatically applies the appropriate template for that section, depending on which folder the content is in. For example, this page is in the docs subdirectory of the site's content root directory content/en/, so Hugo automatically applies the docs template. You can override this by explicitly specifying a template or content type for a particular page.\nIf you've copied the example site, you already have appropriately named top-level section directories for using Docsy's templates, each with an index page ( _index.md or index.html) page for users to land on. These top-level sections also appear in the example site's top-level menu.\nCustom sections If you've copied the example site and don't want to use one of the provided content sections, just delete the appropriate content subdirectory. Similarly, if you want to add a top-level section, just add a new subdirectory, though you'll need to specify the layout or content type explicitly in the frontmatter of each page if you want to use any existing Docsy template other than the default one. For example, if you create a new directory content/en/amazing and want one or more pages in that custom section to use Docsy's docs template, you add layout: docs to the frontmatter of each page:\n---title:\u0026#34;My amazing new section\u0026#34;weight:1layout:docsdescription:\u0026gt; A special section with a docs layout.---Alternatively, create your own page template for your new section in your project's layouts directory based on one of the existing templates.\nYou can find out much more about how Hugo page layouts work in Hugo Templates. The rest of this page tells you about how to add content and use each of Docsy's templates.\nPage frontmatter Each page file in a Hugo site has metadata frontmatter that tells Hugo about the page. You specify page frontmatter in TOML, YAML, or JSON (our example site and this site use YAML). Use the frontmatter to specify the page title, description, creation date, link title, template, menu weighting, and even any resources such as images used by the page. You can see a complete list of possible page frontmatter in Front Matter.\nFor example, here's the frontmatter for this page:\n--- title: \u0026quot;Adding Content\u0026quot; linkTitle: \u0026quot;Adding Content\u0026quot; weight: 1 description: \u0026gt; How to add content to your Docsy site. --- The minimum frontmatter you need to provide is a title: everything else is up to you! (though if you leave out the page weight your navigation may get a little disorganized).\nPage contents and markup By default you create pages in a Docsy site as simple Markdown or HTML files with page frontmatter, as described above. Versions of Hugo before 0.60 use BlackFriday as its Markdown parser. From 0.60, Hugo uses Goldmark as its Markdown parser by default.\nTip If you've been using earlier versions of Hugo, you may need to make some small changes to your site to work with the current Markdown parser. In particular, if you cloned an earlier version of our example site, add the following to your config.toml to allow Goldmark to render raw HTML as well as Markdown:\n[markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true Alternatively, if you want to continue using Blackfriday, you can follow the instructions in the Hugo documentation to change the Markdown parser.\n In addition to your marked-up text, you can also use Hugo and Docsy's shortcodes: reusable chunks of HTML that you can use to quickly build your pages. Find out more about shortcodes in Docsy Shortcodes.\nNote Hugo also supports adding content using other markups using external parsers as helpers. For example, you can add content in RST using rst2html as an external parser (though be aware this does not support all flavors of RST, such as Sphinx RST). Similarly, you can use asciidoctor to parse Asciidoc files, or pandoc for other formats.\nExternal parsers may not be suitable for use with all deployment options, as you'll need to install the external parser and run Hugo yourself to generate your site (so, for example, you won't be able to use Netlify's continuous deployment feature). In addition, adding an external parser may cause performance issues building larger sites.\n Working with links Hugo lets you specify links using normal Markdown syntax, though remember that you need to specify links relative to your site's root URL, and that relative URLs are left unchanged by Hugo in your site's generated HTML.\nAlternatively you can use Hugo's helper ref and relref shortcodes for creating internal links that resolve to the correct URL. However, be aware this means your links will not appear as links at all if a user views your page outside your generated site, for example using the rendered Markdown feature in GitHub's web UI.\nYou can find (or add!) tips and gotchas for working with Hugo links in Hugo Tips.\nContent style We don't mandate any particular style for your page contents. However, if you'd like some guidance on how to write and format clear, concise technical documentation, we recommend the Google Developer Documentation Style Guide, particularly the Style Guide Highlights.\nPage bundles You can create site pages as standalone files in their section or subsection directory, or as folders where the content is in the folder's index page. Creating a folder for your page lets you bundle images and other resources together with the content.\nYou can see examples of both approaches in this and our example site. For example, the source for this page is just a standalone file /content/en/docs/adding-content.md. However the source for Docsy Shortcodes in this site lives in /content/en/docs/adding-content/shortcodes/index.md, with the image resource used by the page in the same /shortcodes/ directory. In Hugo terminology, this is called a leaf bundle because it's a folder containing all the data for a single site page without any child pages (and uses index.md without an underscore).\nYou can find out much more about managing resources with Hugo bundles in Page Bundles.\nAdding docs and blog posts The template you'll probably use most often is the docs template (as used in this page) or the very similar blog template. Both these templates include:\n a left nav GitHub links (populated from your site config) for readers to edit the page or create issues a page menu  as well as the common header and footer used by all your site's pages. Which template is applied depends on whether you've added the content to the blog or docs content directory. You can find out more about how the nav and page menu are created in Navigation and Search.\nOrganizing your documentation While Docsy's top-level sections let you create site sections for different types of content, you may also want to organize your docs content within your docs section. For example, this site's docs section directory has multiple subdirectories for Getting Started, Content and Customization, and so on. Each subdirectory has an _index.md (it could also be an _index.html), which acts as a section index page and tells Hugo that the relevant directory is a subsection of your docs.\nDocsy's docs layout gives you a left nav pane with an autogenerated nested menu based on your docs file structure. Each standalone page or subsection _index.md or _index.html page in the docs/ directory gets a top level menu item, using the link name and weight metadata from the page or index.\nTo add docs to a subsection, just add your page files to the relevant subdirectory. Any pages that you add to a subsection in addition to the subsection index page will appear in a submenu (look to the left to see one in action!), again ordered by page weight. Find out more about adding Docsy's navigation metadata in Navigation and Search\nIf you've copied the example site, you'll already have some suggested subdirectories in your docs directory, with guidance for what types of content to put in them and some example Markdown pages. You can find out more about organizing your content with Docsy in Organizing Your Content.\nDocs section landing pages By default a docs section landing page (the _index.md or _index.html in the section directory) uses a layout that adds a formatted list of links to the pages in the section, with their frontmatter descriptions. The Content and Customization landing page in this site is a good example.\nTo display a simple bulleted list of links to the section's pages instead, specify simple_list: true in the landing page's frontmatter:\n--- title: \u0026quot;Simple List Page\u0026quot; simple_list: true weight: 20 --- To display no links at all, specify no_list: true in the landing page's frontmatter:\n--- title: \u0026quot;No List Page\u0026quot; no_list: true weight: 20 --- Organizing your blog posts Docsy's blog layout also gives you a left nav menu (like the docs layout), and a list-type index page for your blog that's applied to /blog/_index.md and automatically displays snippets of all your recent posts in reverse chronological order.\nTo create different blog categories to organize your posts, create subfolders in blog/. For instance, in our example site we have news and releases. Each category needs to have its own _index.md or _index.html landing page file specifying the category title for it to appear properly in the left nav and top-level blog landing page. Here's the index page for releases:\n--- title: \u0026quot;New Releases\u0026quot; linkTitle: \u0026quot;Releases\u0026quot; weight: 20 --- To add author and date information to blog posts, add them to the page frontmatter:\n--- date: 2018-10-06 title: \u0026quot;Easy documentation with Docsy\u0026quot; linkTitle: \u0026quot;Announcing Docsy\u0026quot; description: \u0026quot;The Docsy Hugo theme lets project maintainers and contributors focus on content, not on reinventing a website infrastructure from scratch\u0026quot; author: Riona MacNamara resources: - src: \u0026quot;**.{png,jpg}\u0026quot; title: \u0026quot;Image #:counter\u0026quot; params: byline: \u0026quot;Photo: Riona MacNamara / CC-BY-CA\u0026quot; --- If you've copied the example site and you don't want a blog section, or want to link to an external blog instead, just delete the blog subdirectory.\nWorking with top-level landing pages. Docsy's default page template has no left nav and is useful for creating a home page for your site or other \u0026ldquo;landing\u0026rdquo; type pages.\nCustomizing the example site pages If you've copied the example site, you already have a simple site landing page in content/en/_index.html. This is made up of Docsy's provided Hugo shortcode page blocks.\nTo customize the large landing image, which is in a cover block, replace the content/en/featured-background.jpg file in your project with your own image (it can be called whatever you like as long as it has background in the file name). You can remove or add as many blocks as you like, as well as adding your own custom content.\nThe example site also has an About page in content/en/about/_index.html using the same Docsy template. Again, this is made up of page blocks, including another background image in content/en/about/featured-background.jpg. As with the site landing page, you can replace the image, remove or add blocks, or just add your own content.\nBuilding your own landing pages If you've just used the theme, you can still use all Docsy's provided page blocks (or any other content you want) to build your own landing pages in the same file locations.\nAdding a community page The community landing page template has boilerplate content that's automatically filled in with the project name and community links specified in config.toml, providing your users with quick links to resources that help them get involved in your project. The same links are also added by default to your site footer.\n[params.links] # End user relevant links. These will show up on left side of footer and in the community page if you have one. [[params.links.user]] name = \u0026#34;User mailing list\u0026#34; url = \u0026#34;https://example.org/mail\u0026#34; icon = \u0026#34;fa fa-envelope\u0026#34; desc = \u0026#34;Discussion and help from your fellow users\u0026#34; [[params.links.user]] name =\u0026#34;Twitter\u0026#34; url = \u0026#34;https://example.org/twitter\u0026#34; icon = \u0026#34;fab fa-twitter\u0026#34; desc = \u0026#34;Follow us on Twitter to get the latest news!\u0026#34; [[params.links.user]] name = \u0026#34;Stack Overflow\u0026#34; url = \u0026#34;https://example.org/stack\u0026#34; icon = \u0026#34;fab fa-stack-overflow\u0026#34; desc = \u0026#34;Practical questions and curated answers\u0026#34; # Developer relevant links. These will show up on right side of footer and in the community page if you have one. [[params.links.developer]] name = \u0026#34;GitHub\u0026#34; url = \u0026#34;https://github.com/google/docsy\u0026#34; icon = \u0026#34;fab fa-github\u0026#34; desc = \u0026#34;Development takes place here!\u0026#34; [[params.links.developer]] name = \u0026#34;Slack\u0026#34; url = \u0026#34;https://example.org/slack\u0026#34; icon = \u0026#34;fab fa-slack\u0026#34; desc = \u0026#34;Chat with other project developers\u0026#34; [[params.links.developer]] name = \u0026#34;Developer mailing list\u0026#34; url = \u0026#34;https://example.org/mail\u0026#34; icon = \u0026#34;fa fa-envelope\u0026#34; desc = \u0026#34;Discuss development issues around the project\u0026#34; If you're creating your own site and want to add a page using this template, add a /community/_index.md file in your content root directory. If you've copied the example site and don't want a community page, just delete the /content/en/community/ directory in your project repo.\nAdding static content You may want to serve some non-Hugo-built content along with your site: for example, if you have generated reference docs using Doxygen, Javadoc, or other doc generation tools.\nTo add static content to be served \u0026ldquo;as-is\u0026rdquo;, just add the content as a folder and/or files in your site's static directory. When your site is deployed, content in this directory is served at the site root path. So, for example, if you have added content at /static/reference/cpp/, users can access that content at http://{server-url}/reference/cpp/ and you can link to pages in this directory from other pages at /reference/cpp/{file name}.\nYou can also use this directory for other files used by your project, including image files. You can find out more about serving static files, including configuring multiple directories for static content, in Static Files.\nRSS feeds Hugo will, by default, create an RSS feed for the home page and any section. For the main RSS feed you can control which sections to include by setting a site param in your config.toml. This is the default configuration:\nrss_sections = [\u0026#34;blog\u0026#34;] To disable all RSS feeds, add the following to your config.toml:\ndisableKinds = [\u0026#34;RSS\u0026#34;] Sitemap Hugo creates a sitemap.xml file for your generated site by default: for example, here's the sitemap for this site.\nYou can configure the frequency with which your sitemap is updated, your sitemap filename, and the default page priority in your config.toml:\n[sitemap] changefreq = \u0026#34;monthly\u0026#34; filename = \u0026#34;sitemap.xml\u0026#34; priority = 0.5 To override any of these values for a given page, specify it in page frontmatter:\n---title:\u0026#34;Adding Content\u0026#34;linkTitle:\u0026#34;Adding Content\u0026#34;weight:1description:\u0026gt; Add different types of content to your Docsy site.sitemap:priority:1.0---To learn more about configuring sitemaps, see Sitemap Template.\n","excerpt":"So you've got a new Hugo website with Docsy, now it's time to add some content! This page tells you …","ref":"/docs/adding-content/content/","title":"Adding Content"},{"body":" \t window.onload = function() { const ui = SwaggerUIBundle({ url: \"https://api.omicidx.cancerdatasci.org/openapi.json\", dom_id: '#ohpen_swagger_ui', presets: [ SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset ] }) window.ui = ui } \t","excerpt":" \t window.onload = function() { const ui = SwaggerUIBundle({ url: …","ref":"/api/","title":"OmicIDX API"},{"body":" RESTful Concepts Before focusing on any jargon or getting hung up on semantics, in the case of the OmicIDX REST API, three components to the system are important.\nThe first is that REST systems are typically composed of resources. Any information that can be named can be a resource: a document or image, a temporal service, a collection of other resources, a non-virtual object (e.g. a person), and so on. In the OmicIDX case, typical resources are things like:\n SRA Runs SRA Studies Biosample Sample records SRA Experiments SRA Samples GEO Platforms GEO Samples GEO Series (studies)  REST uses a resource identifier to “name” the particular resource involved in an interaction. In OmicIDX, these resource identifiers are typically accessions, like SRR000273, SRX000273, or SAMND00000001.\nA REST API accesses resources via http calls. For example, to access a specific SRA study record, one can use a URL like:\nhttps://api.omicidx.cancerdatasci.org/sra/studies/SRP014892\nAccessing the URL from the linux command-line program using a program like curl leads to facile programmatic access. More on programmatic access follows.\nREST is acronym for REpresentational State Transfer. It is architectural style for distributed systems and was first presented by Roy Fielding in 2000 in his famous dissertation.\n Retrieving records by accession All of the common public omics data repositories include accessions for their records. These accessions serve as keys in OmicIDX, so they can be reused easily for quick lookup of records. When the accession is known (such as when you find the accession in a pubmed abstract), retrieving the metadata for that accession is a common task. OmicIDX uses accessions from the original database, so eee table 1 for examples of what to look for.\n Table 1:  This table outlines the resources and the resource identifiers, or accessions, in OmicIDX. Note how the format of the accessions differs across resources. The “type of record” column has multiple Sample entries, for example, but each repository (GEO, SRA, Biosample, etc.) has a unique data model. More details on the data models are in the [SRA], [GEO], and [Biosample] sections.  Database Example accession Type of record    SRA SRP012682 Study  SRA SRS357840 Sample  SRA SRX178456 Experiment  SRA SRR543404 Run  Biosample SAMD00000001 Sample  GEO GSM10 Sample  GEO GSE2553 Study (or Series)  GEO GPL96 Platform    Get an individual record by accession URLs for accessing individual records in OmicIDX follow a standard form and are easy to construct. See Figure 1 for details.\nknitr::include_graphics(\u0026#39;imgs/url_diagram.png\u0026#39;)  Figure 1: OmicIDX URLs to access omics metadata resources by accession follow a pattern. In the diagramatic representation of an OmicIDX URL, box 1 is the server name. Box 2 is the originating database which is, in this case, the [SRA] database. Box 3 is the name of the resource within the originating database, here the studies collection. Finally, box 4 is the accession. Note that no / follows the accession.  For example, the SRA accession for the GTeX study is SRP012682. This accession comes from the sra database and is a study, so we query the following URL:\n https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682  Clicking on the link will return JSON results for the study record for the GTeX study. Alternatively, one can use curl on the command line to access the same URL.\ncurl -s \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682\u0026#39; While curl will work fine to get results, the httpie tool is a friendlier tool for querying web APIs. Installation is straightforward.\nhttp \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682\u0026#39; \\ --pretty format ## { ## \u0026quot;BioProject\u0026quot;: \u0026quot;PRJNA75899\u0026quot;, ## \u0026quot;abstract\u0026quot;: \u0026quot;Lay Description. The aim of the Genotype-Tissue Expression (GTEx) Project is to increase our understanding of how changes in our genes affect human health and disease with the ultimate goal of improving health care for future generations. GTEx will create a database that researchers can use to study how inherited changes in genes lead to common diseases. GTEx researchers are studying genes in different tissues obtained from many different people. The GTEx project also includes a study of the GTEx donor consent process - this study will help ensure that the consent process and other aspects of the project effectively address the concerns and expectations of participants in the study. GTEx is a pioneering project that uses state-of-the-art protocols for obtaining and storing a large range of organs and tissues, and for testing them in the lab. Until now, no project has analyzed genetic variation and expression in as many tissues from the same person in... (for more see dbGaP study page.)\u0026quot;, ## \u0026quot;accession\u0026quot;: \u0026quot;SRP012682\u0026quot;, ## \u0026quot;alias\u0026quot;: \u0026quot;phs000424\u0026quot;, ## \u0026quot;attributes\u0026quot;: [ ## { ## \u0026quot;tag\u0026quot;: \u0026quot;parent_bioproject\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;PRJNA75897\u0026quot; ## } ## ], ## \u0026quot;center_name\u0026quot;: \u0026quot;dbGaP\u0026quot;, ## \u0026quot;experiment_count\u0026quot;: \u0026quot;24588\u0026quot;, ## \u0026quot;identifiers\u0026quot;: [ ## { ## \u0026quot;id\u0026quot;: \u0026quot;PRJNA75899\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;BioProject\u0026quot; ## }, ## { ## \u0026quot;id\u0026quot;: \u0026quot;phs000424\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;dbGaP\u0026quot; ## }, ## { ## \u0026quot;id\u0026quot;: \u0026quot;phs000424\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;dbGaP\u0026quot; ## } ## ], ## \u0026quot;insdc\u0026quot;: true, ## \u0026quot;lastupdate\u0026quot;: \u0026quot;2017-09-17T10:26:44\u0026quot;, ## \u0026quot;mean_bases_per_run\u0026quot;: 14030484634.422861, ## \u0026quot;published\u0026quot;: \u0026quot;2014-02-14T22:56:17\u0026quot;, ## \u0026quot;pubmed_ids\u0026quot;: [], ## \u0026quot;received\u0026quot;: \u0026quot;2012-05-04T15:43:05\u0026quot;, ## \u0026quot;run_count\u0026quot;: \u0026quot;24588\u0026quot;, ## \u0026quot;sample_count\u0026quot;: \u0026quot;14249\u0026quot;, ## \u0026quot;status\u0026quot;: \u0026quot;live\u0026quot;, ## \u0026quot;study_type\u0026quot;: \u0026quot;Other\u0026quot;, ## \u0026quot;taxon_ids\u0026quot;: [ ## \u0026quot;9606\u0026quot; ## ], ## \u0026quot;title\u0026quot;: \u0026quot;Genotype-Tissue Expression (GTEx) Common Fund Project\u0026quot;, ## \u0026quot;total_bases\u0026quot;: \u0026quot;343115501734811\u0026quot;, ## \u0026quot;total_spots\u0026quot;: \u0026quot;1698588305124\u0026quot; ## } The [httr] package is useful in R for accessing web resources. The following is a simple code example.\n# Requires the httr package # install.packages(\u0026#39;httr\u0026#39;) response = httr::GET(\u0026quot;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682\u0026quot;) content = httr::content(response) content ## $pubmed_ids ## list() ## ## $total_spots ## [1] \u0026quot;1698588305124\u0026quot; ## ## $identifiers ## $identifiers[[1]] ## $identifiers[[1]]$id ## [1] \u0026quot;PRJNA75899\u0026quot; ## ## $identifiers[[1]]$namespace ## [1] \u0026quot;BioProject\u0026quot; ## ## ## $identifiers[[2]] ## $identifiers[[2]]$id ## [1] \u0026quot;phs000424\u0026quot; ## ## $identifiers[[2]]$namespace ## [1] \u0026quot;dbGaP\u0026quot; ## ## ## $identifiers[[3]] ## $identifiers[[3]]$id ## [1] \u0026quot;phs000424\u0026quot; ## ## $identifiers[[3]]$namespace ## [1] \u0026quot;dbGaP\u0026quot; ## ## ## ## $taxon_ids ## $taxon_ids[[1]] ## [1] \u0026quot;9606\u0026quot; ## ## ## $experiment_count ## [1] \u0026quot;24588\u0026quot; ## ## $received ## [1] \u0026quot;2012-05-04T15:43:05\u0026quot; ## ## $abstract ## [1] \u0026quot;Lay Description. The aim of the Genotype-Tissue Expression (GTEx) Project is to increase our understanding of how changes in our genes affect human health and disease with the ultimate goal of improving health care for future generations. GTEx will create a database that researchers can use to study how inherited changes in genes lead to common diseases. GTEx researchers are studying genes in different tissues obtained from many different people. The GTEx project also includes a study of the GTEx donor consent process - this study will help ensure that the consent process and other aspects of the project effectively address the concerns and expectations of participants in the study. GTEx is a pioneering project that uses state-of-the-art protocols for obtaining and storing a large range of organs and tissues, and for testing them in the lab. Until now, no project has analyzed genetic variation and expression in as many tissues from the same person in... (for more see dbGaP study page.)\u0026quot; ## ## $accession ## [1] \u0026quot;SRP012682\u0026quot; ## ## $published ## [1] \u0026quot;2014-02-14T22:56:17\u0026quot; ## ## $title ## [1] \u0026quot;Genotype-Tissue Expression (GTEx) Common Fund Project\u0026quot; ## ## $mean_bases_per_run ## [1] 14030484634 ## ## $run_count ## [1] \u0026quot;24588\u0026quot; ## ## $center_name ## [1] \u0026quot;dbGaP\u0026quot; ## ## $study_type ## [1] \u0026quot;Other\u0026quot; ## ## $insdc ## [1] TRUE ## ## $sample_count ## [1] \u0026quot;14249\u0026quot; ## ## $alias ## [1] \u0026quot;phs000424\u0026quot; ## ## $attributes ## $attributes[[1]] ## $attributes[[1]]$value ## [1] \u0026quot;PRJNA75897\u0026quot; ## ## $attributes[[1]]$tag ## [1] \u0026quot;parent_bioproject\u0026quot; ## ## ## ## $total_bases ## [1] \u0026quot;343115501734811\u0026quot; ## ## $lastupdate ## [1] \u0026quot;2017-09-17T10:26:44\u0026quot; ## ## $BioProject ## [1] \u0026quot;PRJNA75899\u0026quot; ## ## $status ## [1] \u0026quot;live\u0026quot; In python, one might use the [requests] library to access the URL and retrieve the data into a python object.\n# requires the requests package be available # pip install requests import requests, pprint response = requests.get( \u0026quot;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682\u0026quot; ) pprint.pprint(response.json()) ## {\u0026#39;BioProject\u0026#39;: \u0026#39;PRJNA75899\u0026#39;, ## \u0026#39;abstract\u0026#39;: \u0026#39;Lay Description. The aim of the Genotype-Tissue Expression \u0026#39; ## \u0026#39;(GTEx) Project is to increase our understanding of how changes \u0026#39; ## \u0026#39;in our genes affect human health and disease with the ultimate \u0026#39; ## \u0026#39;goal of improving health care for future generations. GTEx will \u0026#39; ## \u0026#39;create a database that researchers can use to study how \u0026#39; ## \u0026#39;inherited changes in genes lead to common diseases. GTEx \u0026#39; ## \u0026#39;researchers are studying genes in different tissues obtained \u0026#39; ## \u0026#39;from many different people. The GTEx project also includes a \u0026#39; ## \u0026#39;study of the GTEx donor consent process - this study will help \u0026#39; ## \u0026#39;ensure that the consent process and other aspects of the project \u0026#39; ## \u0026#39;effectively address the concerns and expectations of \u0026#39; ## \u0026#39;participants in the study. GTEx is a pioneering project that \u0026#39; ## \u0026#39;uses state-of-the-art protocols for obtaining and storing a \u0026#39; ## \u0026#39;large range of organs and tissues, and for testing them in the \u0026#39; ## \u0026#39;lab. Until now, no project has analyzed genetic variation and \u0026#39; ## \u0026#39;expression in as many tissues from the same person in... (for \u0026#39; ## \u0026#39;more see dbGaP study page.)\u0026#39;, ## \u0026#39;accession\u0026#39;: \u0026#39;SRP012682\u0026#39;, ## \u0026#39;alias\u0026#39;: \u0026#39;phs000424\u0026#39;, ## \u0026#39;attributes\u0026#39;: [{\u0026#39;tag\u0026#39;: \u0026#39;parent_bioproject\u0026#39;, \u0026#39;value\u0026#39;: \u0026#39;PRJNA75897\u0026#39;}], ## \u0026#39;center_name\u0026#39;: \u0026#39;dbGaP\u0026#39;, ## \u0026#39;experiment_count\u0026#39;: \u0026#39;24588\u0026#39;, ## \u0026#39;identifiers\u0026#39;: [{\u0026#39;id\u0026#39;: \u0026#39;PRJNA75899\u0026#39;, \u0026#39;namespace\u0026#39;: \u0026#39;BioProject\u0026#39;}, ## {\u0026#39;id\u0026#39;: \u0026#39;phs000424\u0026#39;, \u0026#39;namespace\u0026#39;: \u0026#39;dbGaP\u0026#39;}, ## {\u0026#39;id\u0026#39;: \u0026#39;phs000424\u0026#39;, \u0026#39;namespace\u0026#39;: \u0026#39;dbGaP\u0026#39;}], ## \u0026#39;insdc\u0026#39;: True, ## \u0026#39;lastupdate\u0026#39;: \u0026#39;2017-09-17T10:26:44\u0026#39;, ## \u0026#39;mean_bases_per_run\u0026#39;: 14030484634.422861, ## \u0026#39;published\u0026#39;: \u0026#39;2014-02-14T22:56:17\u0026#39;, ## \u0026#39;pubmed_ids\u0026#39;: [], ## \u0026#39;received\u0026#39;: \u0026#39;2012-05-04T15:43:05\u0026#39;, ## \u0026#39;run_count\u0026#39;: \u0026#39;24588\u0026#39;, ## \u0026#39;sample_count\u0026#39;: \u0026#39;14249\u0026#39;, ## \u0026#39;status\u0026#39;: \u0026#39;live\u0026#39;, ## \u0026#39;study_type\u0026#39;: \u0026#39;Other\u0026#39;, ## \u0026#39;taxon_ids\u0026#39;: [\u0026#39;9606\u0026#39;], ## \u0026#39;title\u0026#39;: \u0026#39;Genotype-Tissue Expression (GTEx) Common Fund Project\u0026#39;, ## \u0026#39;total_bases\u0026#39;: \u0026#39;343115501734811\u0026#39;, ## \u0026#39;total_spots\u0026#39;: \u0026#39;1698588305124\u0026#39;} Each resource (SRA Sample, for example) has a particular data model that is shared across all members of that resource. However, different resources (SRA Sample vs SRA Study) will have different data models (though some fields are common) from one another. To get a sense of what other resources look like, try clicking through these links. For more details, see the data models for [SRA], [GEO], and [Biosample].\nAdditional examples include:\n https://api.omicidx.cancerdatasci.org/sra/samples/SRS357840 https://api.omicidx.cancerdatasci.org/sra/experiments/SRX178456 https://api.omicidx.cancerdatasci.org/sra/runs/SRR543404 https://api.omicidx.cancerdatasci.org/biosample/samples/SAMD00000001   Get records related to an accession Another common task is to find all the records of one type for a record of another type, e.g., all samples for a given study. For this section, we will make the workflow a bit more realistic. Mike Love routinely teaches about gene-level differential RNA-seq expression using the rnaseqGene Bioconductor workflow. After accessing the Bioconductor vignette, we note that the data used are from [@Himes2014-zj].\nTo find SRA links from a PubMed record, look at the Related Information section that will look like Figure 2. Clicking on the SRA link will reveal that thethe related SRA study is SRP033351. Reviewing the single-record access approach from the last section, this URL returns the details of the study.\n https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351   Figure 2: When viewing a PubMed abstract, the Related Information section may have link(s) out to omics databases. Clicking through on one of these links will reveal an accession that can be used for accessing OmicIDX  Fetching all related samples given this study (see the [SRA data model section][SRA] for how samples relate to a study) is straightforward and the URL again follows a pattern.\n https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/samples  The URLs for all related experiment and run records are, respectively:\n https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/experiments https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/runs  Here are additional examples of accessing related records:\n https://api.omicidx.cancerdatasci.org/sra/samples/SRS357840/experiments https://api.omicidx.cancerdatasci.org/sra/samples/SRS357840/runs https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/experiments https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/runs https://api.omicidx.cancerdatasci.org/sra/samples/SRS357840/experiments https://api.omicidx.cancerdatasci.org/sra/samples/SRS357840/runs    Counting and paging through results API accesses and queries may include many millions of records, but the OmicIDX REST API limits resultsets to batches of size \u0026lt;1000 records in a single call to the API. This section addresses:\nChoosing the number of results, or size, that are returned by each API call. Paging through very large resultsets in chunks using the cursor.  Adjusting the page size Adding a size parameter to the URL above modifies the default resultset size of 10 to be either smaller (down to zero) or larger (up to 999). An example URL including the size parameter looks like:\n https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/samples?size=2  # curl -s \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/samples?size=2\u0026#39; http \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/samples\u0026#39; \\ size==2 \\ --pretty format ## { ## \u0026quot;cursor\u0026quot;: \u0026quot;X2lkfHxhc2N8fHx8U1JTNTA4NTY4\u0026quot;, ## \u0026quot;hits\u0026quot;: [ ## { ## \u0026quot;BioSample\u0026quot;: \u0026quot;SAMN02422675\u0026quot;, ## \u0026quot;accession\u0026quot;: \u0026quot;SRS508567\u0026quot;, ## \u0026quot;alias\u0026quot;: \u0026quot;GSM1275863\u0026quot;, ## \u0026quot;attributes\u0026quot;: [ ## { ## \u0026quot;tag\u0026quot;: \u0026quot;source_name\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;airway smooth muscle cells\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;treatment\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;Dexamethasone\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;tissue\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;human airway smooth muscle cells\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;ercc_mix\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;-\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;cell line\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;N61311\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;cell type\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;airway smooth muscle cells\u0026quot; ## } ## ], ## \u0026quot;experiment_count\u0026quot;: \u0026quot;1\u0026quot;, ## \u0026quot;identifiers\u0026quot;: [ ## { ## \u0026quot;id\u0026quot;: \u0026quot;SAMN02422675\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;BioSample\u0026quot; ## }, ## { ## \u0026quot;id\u0026quot;: \u0026quot;GSM1275863\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;GEO\u0026quot; ## } ## ], ## \u0026quot;insdc\u0026quot;: true, ## \u0026quot;lastupdate\u0026quot;: \u0026quot;2014-11-07T22:00:54\u0026quot;, ## \u0026quot;mean_bases_per_run\u0026quot;: 2665619082, ## \u0026quot;organism\u0026quot;: \u0026quot;Homo sapiens\u0026quot;, ## \u0026quot;published\u0026quot;: \u0026quot;2014-01-01T05:49:37\u0026quot;, ## \u0026quot;received\u0026quot;: \u0026quot;2013-11-26T21:30:10\u0026quot;, ## \u0026quot;run_count\u0026quot;: \u0026quot;1\u0026quot;, ## \u0026quot;status\u0026quot;: \u0026quot;live\u0026quot;, ## \u0026quot;study\u0026quot;: { ## \u0026quot;BioProject\u0026quot;: \u0026quot;PRJNA229998\u0026quot;, ## \u0026quot;abstract\u0026quot;: \u0026quot;Rationale: Asthma is a chronic inflammatory airway disease. The most common medications used for its treatment are ß2-agonists and glucocorticosteroids, and one of the primary tissues that these drugs target in the treatment of asthma is the airway smooth muscle. We used RNA-Seq to characterize the human airway smooth muscle (HASM) transcriptome at baseline and under three asthma treatment conditions. Methods: The Illumina TruSeq assay was used to prepare 75bp paired-end libraries for HASM cells from four white male donors under four treatment conditions: 1) no treatment; 2) treatment with a ß2-agonist (i.e. Albuterol, 1µM for 18h); 3) treatment with a glucocorticosteroid (i.e. Dexamethasone (Dex), 1µM for 18h); 4) simultaneous treatment with a ß2-agonist and glucocorticoid, and the libraries were sequenced with an Illumina Hi-Seq 2000 instrument. The Tuxedo Suite Tools were used to align reads to the hg19 reference genome, assemble transcripts, and perform differential expression analysis using the protocol described in https://github.com/blancahimes/taffeta Overall design: mRNA profiles obtained via RNA-Seq for four primary human airway smooth muscle cell lines that were treated with dexamethasone, albuterol, dexamethasone+albuterol or were left untreated.\u0026quot;, ## \u0026quot;accession\u0026quot;: \u0026quot;SRP033351\u0026quot;, ## \u0026quot;alias\u0026quot;: \u0026quot;GSE52778\u0026quot;, ## \u0026quot;attributes\u0026quot;: [], ## \u0026quot;center_name\u0026quot;: \u0026quot;GEO\u0026quot;, ## \u0026quot;identifiers\u0026quot;: [ ## { ## \u0026quot;id\u0026quot;: \u0026quot;PRJNA229998\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;BioProject\u0026quot; ## }, ## { ## \u0026quot;id\u0026quot;: \u0026quot;GSE52778\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;GEO\u0026quot; ## } ## ], ## \u0026quot;insdc\u0026quot;: true, ## \u0026quot;lastupdate\u0026quot;: \u0026quot;2018-06-12T17:05:25\u0026quot;, ## \u0026quot;published\u0026quot;: \u0026quot;2014-01-02T14:16:11\u0026quot;, ## \u0026quot;pubmed_ids\u0026quot;: [ ## \u0026quot;24926665\u0026quot; ## ], ## \u0026quot;received\u0026quot;: \u0026quot;2013-11-26T21:29:11\u0026quot;, ## \u0026quot;status\u0026quot;: \u0026quot;live\u0026quot;, ## \u0026quot;study_type\u0026quot;: \u0026quot;Transcriptome Analysis\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;Human Airway Smooth Muscle Transcriptome Changes in Response to Asthma Medications\u0026quot; ## }, ## \u0026quot;taxon_id\u0026quot;: \u0026quot;9606\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;N61311_Dex\u0026quot;, ## \u0026quot;total_bases\u0026quot;: \u0026quot;2665619082\u0026quot;, ## \u0026quot;total_spots\u0026quot;: \u0026quot;21155707\u0026quot;, ## \u0026quot;xrefs\u0026quot;: [ ## { ## \u0026quot;db\u0026quot;: \u0026quot;bioproject\u0026quot;, ## \u0026quot;id\u0026quot;: \u0026quot;229998\u0026quot; ## } ## ] ## }, ## { ## \u0026quot;BioSample\u0026quot;: \u0026quot;SAMN02422669\u0026quot;, ## \u0026quot;accession\u0026quot;: \u0026quot;SRS508568\u0026quot;, ## \u0026quot;alias\u0026quot;: \u0026quot;GSM1275862\u0026quot;, ## \u0026quot;attributes\u0026quot;: [ ## { ## \u0026quot;tag\u0026quot;: \u0026quot;source_name\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;airway smooth muscle cells\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;treatment\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;Untreated\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;tissue\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;human airway smooth muscle cells\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;ercc_mix\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;-\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;cell line\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;N61311\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;cell type\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;airway smooth muscle cells\u0026quot; ## } ## ], ## \u0026quot;experiment_count\u0026quot;: \u0026quot;1\u0026quot;, ## \u0026quot;identifiers\u0026quot;: [ ## { ## \u0026quot;id\u0026quot;: \u0026quot;SAMN02422669\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;BioSample\u0026quot; ## }, ## { ## \u0026quot;id\u0026quot;: \u0026quot;GSM1275862\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;GEO\u0026quot; ## } ## ], ## \u0026quot;insdc\u0026quot;: true, ## \u0026quot;lastupdate\u0026quot;: \u0026quot;2014-11-07T22:00:54\u0026quot;, ## \u0026quot;mean_bases_per_run\u0026quot;: 2889875646, ## \u0026quot;organism\u0026quot;: \u0026quot;Homo sapiens\u0026quot;, ## \u0026quot;published\u0026quot;: \u0026quot;2014-01-01T05:49:38\u0026quot;, ## \u0026quot;received\u0026quot;: \u0026quot;2013-11-26T21:30:11\u0026quot;, ## \u0026quot;run_count\u0026quot;: \u0026quot;1\u0026quot;, ## \u0026quot;status\u0026quot;: \u0026quot;live\u0026quot;, ## \u0026quot;study\u0026quot;: { ## \u0026quot;BioProject\u0026quot;: \u0026quot;PRJNA229998\u0026quot;, ## \u0026quot;abstract\u0026quot;: \u0026quot;Rationale: Asthma is a chronic inflammatory airway disease. The most common medications used for its treatment are ß2-agonists and glucocorticosteroids, and one of the primary tissues that these drugs target in the treatment of asthma is the airway smooth muscle. We used RNA-Seq to characterize the human airway smooth muscle (HASM) transcriptome at baseline and under three asthma treatment conditions. Methods: The Illumina TruSeq assay was used to prepare 75bp paired-end libraries for HASM cells from four white male donors under four treatment conditions: 1) no treatment; 2) treatment with a ß2-agonist (i.e. Albuterol, 1µM for 18h); 3) treatment with a glucocorticosteroid (i.e. Dexamethasone (Dex), 1µM for 18h); 4) simultaneous treatment with a ß2-agonist and glucocorticoid, and the libraries were sequenced with an Illumina Hi-Seq 2000 instrument. The Tuxedo Suite Tools were used to align reads to the hg19 reference genome, assemble transcripts, and perform differential expression analysis using the protocol described in https://github.com/blancahimes/taffeta Overall design: mRNA profiles obtained via RNA-Seq for four primary human airway smooth muscle cell lines that were treated with dexamethasone, albuterol, dexamethasone+albuterol or were left untreated.\u0026quot;, ## \u0026quot;accession\u0026quot;: \u0026quot;SRP033351\u0026quot;, ## \u0026quot;alias\u0026quot;: \u0026quot;GSE52778\u0026quot;, ## \u0026quot;attributes\u0026quot;: [], ## \u0026quot;center_name\u0026quot;: \u0026quot;GEO\u0026quot;, ## \u0026quot;identifiers\u0026quot;: [ ## { ## \u0026quot;id\u0026quot;: \u0026quot;PRJNA229998\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;BioProject\u0026quot; ## }, ## { ## \u0026quot;id\u0026quot;: \u0026quot;GSE52778\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;GEO\u0026quot; ## } ## ], ## \u0026quot;insdc\u0026quot;: true, ## \u0026quot;lastupdate\u0026quot;: \u0026quot;2018-06-12T17:05:25\u0026quot;, ## \u0026quot;published\u0026quot;: \u0026quot;2014-01-02T14:16:11\u0026quot;, ## \u0026quot;pubmed_ids\u0026quot;: [ ## \u0026quot;24926665\u0026quot; ## ], ## \u0026quot;received\u0026quot;: \u0026quot;2013-11-26T21:29:11\u0026quot;, ## \u0026quot;status\u0026quot;: \u0026quot;live\u0026quot;, ## \u0026quot;study_type\u0026quot;: \u0026quot;Transcriptome Analysis\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;Human Airway Smooth Muscle Transcriptome Changes in Response to Asthma Medications\u0026quot; ## }, ## \u0026quot;taxon_id\u0026quot;: \u0026quot;9606\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;N61311_untreated\u0026quot;, ## \u0026quot;total_bases\u0026quot;: \u0026quot;2889875646\u0026quot;, ## \u0026quot;total_spots\u0026quot;: \u0026quot;22935521\u0026quot;, ## \u0026quot;xrefs\u0026quot;: [ ## { ## \u0026quot;db\u0026quot;: \u0026quot;bioproject\u0026quot;, ## \u0026quot;id\u0026quot;: \u0026quot;229998\u0026quot; ## } ## ] ## } ## ], ## \u0026quot;stats\u0026quot;: { ## \u0026quot;took\u0026quot;: 1, ## \u0026quot;total\u0026quot;: 16 ## }, ## \u0026quot;success\u0026quot;: true ## } Using a size of zero (0) is useful to capture just the count of the number of records.\n# curl -s \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/samples?size=0\u0026#39; http \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/samples\u0026#39; \\ size==0 \\ --pretty format ## { ## \u0026quot;cursor\u0026quot;: null, ## \u0026quot;hits\u0026quot;: [], ## \u0026quot;stats\u0026quot;: { ## \u0026quot;took\u0026quot;: 0, ## \u0026quot;total\u0026quot;: 16 ## }, ## \u0026quot;success\u0026quot;: true ## } Note that the stats.total part of the output gives the number 16. All data resultsets from the OmicIDX API will include this annotation, giving the total number of results available given the query or URL.\nAnother, larger study, such at GTeX (SRP015892) offers many more samples. But how many?\n# curl -s \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples?size=0\u0026#39; http \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples\u0026#39; \\ size==0 \\ --pretty format ## { ## \u0026quot;cursor\u0026quot;: null, ## \u0026quot;hits\u0026quot;: [], ## \u0026quot;stats\u0026quot;: { ## \u0026quot;took\u0026quot;: 0, ## \u0026quot;total\u0026quot;: 14249 ## }, ## \u0026quot;success\u0026quot;: true ## } Therefore, the size parameter varies the number of results returned by an API call. Using a size of zero (0) is a quick-and-dirty approach to get a count of the number of records that would be returned by an API call. This same trick can be used when counting search results below.\n Using the cursor to page through large result sets. The limitation on result set size is to mitigate problems with network connectivity and to simplify somewhat the database backend infrastructure. However, there are definitely result sets that are larger than 999 records. How do we deal with that situation?\nThe OmicIDX API uses paging. In particular, the API uses cursor-based paging. For each result set that the API returns, if more results are available, there will be a cursor field available that can be used as a parameter to the next API call to start with results after the cursor. Perhaps it is easier to explain with an example:\n# curl -s \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples?size=5\u0026#39; http \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples\u0026#39; \\ size==5 \\ --pretty format If you run the line above, the result will include a \u0026quot;cursor\u0026quot;: \u0026quot;LONG....STRING\u0026quot; that might look like the following (your cursor may be different).\n... ], \u0026quot;cursor\u0026quot;: \u0026quot;X2lkfHxhc2N8fHx8U1JTMTAxNzEzNw==\u0026quot;, \u0026quot;stats\u0026quot;: { \u0026quot;total\u0026quot;: 14249, \u0026quot;took\u0026quot;: 10 }, \u0026quot;success\u0026quot;: true } ... Adding the cursor as a parameter to the same URL retrieves the next 5 results like so:\n# curl -s \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples?size=5\u0026amp;cursor=X2lkfHxhc2N8fHx8U1JTMTAxNzEzNw==\u0026#39; http \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples\u0026#39; \\ size==5 \\ \u0026#39;cursor==X2lkfHxhc2N8fHx8U1JTMTAxNzEzNw==\u0026#39; \\ --pretty format The next cursor value will look similar (for example, “X2lkfHxhc2N8fHx8U1JTMTAxNzE0Mg==”). Continuing to play this game of specifying the cursor when it is available allows paging through the result set. When fetching results, the cursor will be available until there are no more results to be fetched. Thus, when there is not a cursor entry in the results, all results have been retrieved and any looping code can stop.\nNote a few assumptions/caveats here.\nThe size parameter dictates the number of results in one “page”. The cursor parameter is specific to the search or API query. Cursors cannot be reused across different queries. When calling the API, the query should remain fixed when paging with a cursor (ie., use the same URL over again, changing only the cursor value). Underlying the cursor functionality is a fixed sorting order (that is not currently a parameter that can be tweeked).    Customizing returned fields Listing available fields # curl -s \u0026#39;https://api.omicidx.cancerdatasci.org/_mapping/study\u0026#39; http \u0026#39;https://api.omicidx.cancerdatasci.org/_mapping/study\u0026#39; \\ --pretty format ## [ ## { ## \u0026quot;field\u0026quot;: \u0026quot;BioProject\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;abstract\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;accession\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;alias\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;attributes.tag\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;attributes.value\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;broker_name\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;center_name\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;description\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;experiment_count\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;identifiers.id\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: true, ## \u0026quot;path\u0026quot;: \u0026quot;identifiers\u0026quot;, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;identifiers.namespace\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: true, ## \u0026quot;path\u0026quot;: \u0026quot;identifiers\u0026quot;, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;insdc\u0026quot;, ## \u0026quot;keyword\u0026quot;: false, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;boolean\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;lastupdate\u0026quot;, ## \u0026quot;keyword\u0026quot;: false, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;date\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;mean_bases_per_run\u0026quot;, ## \u0026quot;keyword\u0026quot;: false, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;float\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;published\u0026quot;, ## \u0026quot;keyword\u0026quot;: false, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;date\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;pubmed_ids\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;received\u0026quot;, ## \u0026quot;keyword\u0026quot;: false, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;date\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;run_count\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;sample_count\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;status\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;study_type\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;taxon_ids\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;title\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;total_bases\u0026quot;, ## \u0026quot;keyword\u0026quot;: false, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;long\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;total_spots\u0026quot;, ## \u0026quot;keyword\u0026quot;: false, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;long\u0026quot; ## } ## ]  Including or excluding specific fields from results # curl -s \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples?size=5\u0026amp;include_fields=accession\u0026amp;include_fields=title\u0026#39; http \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples\u0026#39; \\ \u0026#39;size==5\u0026#39; \u0026#39;include_fields==accession\u0026#39; \\ \u0026#39;include_fields==title\u0026#39; \\ --pretty format ## { ## \u0026quot;cursor\u0026quot;: \u0026quot;X2lkfHxhc2N8fHx8U1JTMTAxNzEzNw==\u0026quot;, ## \u0026quot;hits\u0026quot;: [ ## { ## \u0026quot;accession\u0026quot;: \u0026quot;SRS1017133\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;Non-tumor RNA:Total RNA sample from Skin - Sun Exposed (Lower leg) of a human female participant in the dbGaP study \\\u0026quot;Genotype-Tissue Expression (GTEx)\\\u0026quot;\u0026quot; ## }, ## { ## \u0026quot;accession\u0026quot;: \u0026quot;SRS1017134\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;Non-tumor RNA:Total RNA sample from Testis of a human male participant in the dbGaP study \\\u0026quot;Genotype-Tissue Expression (GTEx)\\\u0026quot;\u0026quot; ## }, ## { ## \u0026quot;accession\u0026quot;: \u0026quot;SRS1017135\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;Non-tumor RNA:Total RNA sample from Thyroid of a human male participant in the dbGaP study \\\u0026quot;Genotype-Tissue Expression (GTEx)\\\u0026quot;\u0026quot; ## }, ## { ## \u0026quot;accession\u0026quot;: \u0026quot;SRS1017136\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;Non-tumor RNA:Total RNA sample from Thyroid of a human male participant in the dbGaP study \\\u0026quot;Genotype-Tissue Expression (GTEx)\\\u0026quot;\u0026quot; ## }, ## { ## \u0026quot;accession\u0026quot;: \u0026quot;SRS1017137\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;Non-tumor RNA:Total RNA sample from Stomach of a human male participant in the dbGaP study \\\u0026quot;Genotype-Tissue Expression (GTEx)\\\u0026quot;\u0026quot; ## } ## ], ## \u0026quot;stats\u0026quot;: { ## \u0026quot;took\u0026quot;: 9, ## \u0026quot;total\u0026quot;: 14249 ## }, ## \u0026quot;success\u0026quot;: true ## }   Search Decide what you want to search for: studies, samples, experiments, or runs. Take a look at the output of one of the API calls on the previous slide for the entity type you want to search for. Look closely at the field names and what is in them. Form the query using lucene query syntax. Form the URL based like so, using q= to specify the query string. For example, to find all human RNA-seq experiments:  https://api.omicidx.cancerdatasci.org/sra/experiments?q=library_strategy:\u0026quot;RNA-Seq\u0026quot; AND sample.taxon_id:9606\nThe number of records can be tuned using size=.... (up to 999 records).\n Aggregation and basic analytics  ","excerpt":"RESTful Concepts Before focusing on any jargon or getting hung up on semantics, in the case of the …","ref":"/docs/open-web-api/rest-api/","title":"Background"},{"body":"Prerequisites and installation Install Hugo You need a recent extended version (we recommend version 0.53 or later) of Hugo to do local builds and previews of sites (like this one) that use Docsy. If you install from the release page, make sure to get the extended Hugo version, which supports SCSS; you may need to scroll down the list of releases to see it.\nFor comprehensive Hugo documentation, see gohugo.io.\nLinux Do not use sudo apt-get install hugo, as it currently doesn't get you the extended version.\nIf you've already installed Hugo, check your version:\nhugo version If the result is v0.52 or earlier, or if you don't see Extended, you'll need to install the latest version.\n  Go to the Hugo releases page.\n  In the most recent release, scroll down until you find a list of Extended versions.\n  Download the latest extended version (hugo_extended_0.5X_Linux-64bit.tar.gz).\n  Create a new directory:\nmkdir hugo    Extract the files you downloaded to hugo.\n  Switch to your new directory:\ncd hugo    Install Hugo:\nsudo install hugo /usr/bin    macOS Install Hugo using Brew.\nInstall PostCSS To build or update your site's CSS resources, you also need PostCSS to create the final assets. If you need to install it, you must have a recent version of NodeJS installed on your machine so you can use npm, the Node package manager. By default npm installs tools under the directory where you run npm install:\nsudo npm install -D --save autoprefixer sudo npm install -D --save postcss-cli Note that versions of PostCSS later than 5.0.1 will not load autoprefixer if installed globally, you must use a local install.\nUsing the theme To use the Docsy Hugo theme, you have a couple of options:\n Copy and edit the source for the Docsy example site. This approach gives you a skeleton structure for your site, with top-level and documentation sections and templates that you can modify as necessary. The example site uses Docsy as a Git submodule, so it's easy to keep up to date. Build your own site using the Docsy theme. Specify the Docsy theme like any other Hugo theme when creating or updating your site. With this option, you'll get Docsy look and feel, navigation, and other features, but you'll need to specify your own site structure.  Option 1: Clone the Docsy example site The Example Site gives you a good starting point for building your docs site and is pre-configured to use the Docsy theme as a Git submodule. You can clone the Example Site either by:\n Using the GitHub UI Using the command line  Using the GitHub UI git clone --recurse-submodules --depth 1 https://github.com/my/example.git  You can now edit your local versions of the site's source files. To preview your site, go to your site root directory and run `hugo server`. By default, your site will be available at http://localhost:1313/. To push changes to your new repo, go to your site root directory and use `git push`.-- Note that the following approach forks our repo and so creates a connection in GitHub between your project repo and the Docsy example site project repo - our project will be the \u0026ldquo;upstream\u0026rdquo; version of your site project:\n  In the the Docsy example site's GitHub repo, click Fork and follow the prompts.\n  Rename your new fork:\n Click Settings, and type a new name in the Repository name field. Click Rename to save your changes.    Get the web URL for cloning your site repo by clicking Clone or download on its main repo page.\n  Make your own local working copy of your repo using git clone, replacing https://github.com/my/example.git with your repo's web URL:\n git clone --recurse-submodules --depth 1 https://github.com/my/example.git    You can now edit your local versions of the site's source files. To preview your site, go to your site root directory and run hugo server. By default, your site will be available at http://localhost:1313/. To push changes to your new repo, go to your site root directory and use git push.\nUsing the command line To copy the example site:\n  Make a local working copy of the example site directly using git clone:\ngit clone https://github.com/google/docsy-example.git    Switch to the root of the cloned project, for example:\n cd docsy-example    Get local copies of the project submodules so you can build and run your site locally:\n git submodule update --init --recursive    Build your site:\n hugo server    Preview your site in your browser at: http://localhost:1313/. You can use Ctrl + c to stop the Hugo server whenever you like.\n  Now that you have a site running, you can push it to a new repository:\n  Create a new repository in GitHub for your site with your chosen repo name. For clarity you may also want to rename the root directory (docsy-example) of your working copy to match, though everything will still work even if you don't.\n  Configure origin in your project. From your site's root directory, set the URL for origin to your new repo (otherwise you'll be trying to push changes to google/docsy rather than to your repo):\n git remote set-url origin https://github.com/MY-SITE/EXAMPLE.git    Verify that your remote is configured correctly by running:\n git remote -v    Push your Docsy site to your repository:\n git push -u origin master      Option 2: Use the Docsy theme in your own site Specify the Docsy theme like any other Hugo theme when creating or updating your site. This gives you all the theme-y goodness but you'll need to specify your own site structure. You can either use the theme as a submodule (our recommended approach for easy updates), or just clone the theme into your project's themes subdirectory.\nWhichever approach you use, for simplicity we recommend copying and editing our example site configuration for your project, or you may get Hugo errors for missing parameters and values when you try to build your site.\nUsing the Docsy theme as a submodule Adding Docsy as a Git submodule is our recommended approach for using the theme, as it means your project always refers to the Docsy repo version at your chosen revision, rather than you having your own copy in your repo that may result in merge conflicts when you try to update it. This is the approach used by our example project.\nTo create a new Hugo site project and then add the Docs theme as a submodule, run the following commands from your project's root directory.\nhugo new site myproject cd myproject git init git submodule add https://github.com/google/docsy.git themes/docsy echo \u0026#39;theme = \u0026#34;docsy\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml git submodule update --init --recursive To add the Docsy theme to an existing site, run the following commands from your project's root directory:\ngit submodule add https://github.com/google/docsy.git themes/docsy echo 'theme = \u0026quot;docsy\u0026quot;' \u0026gt;\u0026gt; config.toml git submodule update --init --recursive Cloning the Docsy theme to your project's themes subdirectory If you don't want to use a submodules (for example, if you want to customize and maintain your own copy of the theme directly, or your deployment choice requires you to include a copy of the theme in your repository), you can clone the theme into your project.\nTo clone Docsy into your project's theme folder, run the following commands from your project's root directory:\ncd themes git clone https://github.com/google/docsy For more information, see Install and Use Themes on the Hugo site.\nPreview your site To build and preview your site locally:\ncd myproject hugo server By default, your site will be available at http://localhost:1313/.\nBasic site configuration Site-wide configuration details and parameters are defined in your project's config.toml file. These include your chosen Hugo theme (Docsy, of course!), project name, community links, Google Analytics configuration, and Markdown parser parameters. See the examples with comments in config.toml in the example project for how to add this information. We recommend copying this config.toml and editing it even if you're just using the theme and not copying the entire Docsy example site.\nThe Docsy example site comes with some defaults you may want to remove or customize straight away:\nInternationalization The Docsy example site supports content in English and Norwegian. You can find out more about how Docsy supports multi-language content in Multi-language support.\nIf you don't intend to translate your site to Norwegian, you can remove the language switcher by removing the following lines from config.toml:\n[languages.no] title = \u0026quot;Docsy\u0026quot; description = \u0026quot;Docsy er operativsystem for skyen\u0026quot; languageName =\u0026quot;Norsk\u0026quot; contentDir = \u0026quot;content/no\u0026quot; To remove the translated source files, delete the docsy-example/content/no directory.\nSearch By default, the Docsy example site uses its own Google Custom Search Engine. To disable site search, delete or comment out the following lines:\n# Google Custom Search Engine ID. Remove or comment out to disable search. gcs_engine_id = \u0026quot;011737558837375720776:fsdu1nryfng\u0026quot; To use your own Custom Search Engine, replace the value in the gcs_engine_id with the ID of your own search engine.\nWhat's next?  Add content and customize your site Get some ideas from our Example Site and other Examples. Publish your site.  ","excerpt":"Prerequisites and installation Install Hugo You need a recent extended version (we recommend version …","ref":"/docs/getting-started/","title":"Getting Started"},{"body":"By default, a site using Docsy has the theme's default fonts, colors, and general look and feel. However, if you want your own color scheme (and you probably will!) you can very easily override the theme defaults with your own project-specific values - Hugo will look in your project files first when looking for information to build your site. Also because Docsy uses Bootstrap 4 and SCSS for styling, you can override just single values in its special SCSS project variables file, or do more serious customization by creating your own versions of entire SCSS files.\nColor palette and other styles To quickly change your site's colors, add SCSS variable project overrides to assets/scss/_variables_project.scss. A simple example changing the primary and secondary color to two shades of purple:\n$primary: #390040; $secondary: #A23B72;  See assets/scss/_variables.scss in the theme for color variables etc. that can be set to change the look and feel. Also see available variables in Bootstrap 4: https://getbootstrap.com/docs/4.0/getting-started/theming/ and https://github.com/twbs/bootstrap/blob/v4-dev/scss/_variables.scss  The theme has features suchs as rounded corners and gradient backgrounds enabled by default. These can also be toggled in your project variables file:\n$enable-gradients: true; $enable-rounded: true; $enable-shadows: true;  Tip PostCSS (autoprefixing of CSS browser-prefixes) is not enabled when running in server mode (it is a little slow), so Chrome is the recommended choice for development.  Also note that any SCSS import will try the project before the theme, so you can \u0026ndash; as one example \u0026ndash; create your own _assets/scss/_content.scss and get full control over how your Markdown content is styled.\nFonts The theme uses Open Sans as its primary font. To disable Google Fonts and use a system font, set this SCSS variable in assets/scss/_variables_project.scss:\n$td-enable-google-fonts: false; To configure another Google Font:\n$google_font_name: \u0026#34;Open Sans\u0026#34;; $google_font_family: \u0026#34;Open+Sans:300,300i,400,400i,700,700i\u0026#34;; Note that if you decide to go with a font with different weights (in the built-in configuration this is 300 (light), 400 (medium) and 700 (bold)), you also need to adjust the weight related variables, i.e. variables starting with $font-weight-.\nCSS utilities For documentation of available CSS utility classes, see the Bootstrap Documentation. This theme adds very little on its own in this area. However, we have added some some color state CSS classes that can be useful in a dynamic context:\n .-bg-\u0026lt;color\u0026gt; .-text-\u0026lt;color\u0026gt;  You can use these classes, for example, to style your text in an appropriate color when you don't know if the primary color is dark or light, to ensure proper color contrast. They are also useful when you receive the color code as a shortcode parameter.\nThe value of \u0026lt;color\u0026gt; can be any of the color names, primary, white, dark, warning, light, success, 300, blue, orange etc.\nWhen you use .-bg-\u0026lt;color\u0026gt;, the text colors will be adjusted to get proper contrast:\n\u0026lt;div class=\u0026#34;-bg-primary p-3 display-4\u0026#34;\u0026gt;Background: Primary\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;-bg-200 p-3 display-4\u0026#34;\u0026gt;Background: Gray 200\u0026lt;/div\u0026gt; Background: Primary Background: Gray 200 .-text-\u0026lt;color\u0026gt; sets the text color only:\n\u0026lt;div class=\u0026#34;-text-blue pt-3 display-4\u0026#34;\u0026gt;Text: Blue\u0026lt;/div\u0026gt; Text: Blue Customizing templates Add code to head or before body end If you need to add some code (CSS import or similar) to the head section on every page, add a partial to your project:\nlayouts/partials/hooks/head-end.html And add the code you need in that file. Your partial code is automatically included at the end of the theme partial head.html (the theme version of head-end.html is empty):\nSimilar, if you want to add some code right before the body end, create your own version of the following file:\nlayouts/partials/hooks/body-end.html Any code in this file is included automatically at the end of the theme partial scripts.html.\nBoth head.html and scripts.html are then used to build Docsy's base page layout, which is used by all the other page templates:\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;{{ .Site.Language.Lang }}\u0026#34; class=\u0026#34;no-js\u0026#34;\u0026gt; \u0026lt;head\u0026gt; {{ partial \u0026#34;head.html\u0026#34; . }} \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;td-{{ .Kind }}\u0026#34;\u0026gt; \u0026lt;header\u0026gt; {{ partial \u0026#34;navbar.html\u0026#34; . }} \u0026lt;/header\u0026gt; \u0026lt;div class=\u0026#34;container-fluid td-default td-outer\u0026#34;\u0026gt; \u0026lt;main role=\u0026#34;main\u0026#34; class=\u0026#34;td-main\u0026#34;\u0026gt; {{ block \u0026#34;main\u0026#34; . }}{{ end }} \u0026lt;/main\u0026gt; {{ partial \u0026#34;footer.html\u0026#34; . }} \u0026lt;/div\u0026gt; {{ partialCached \u0026#34;scripts.html\u0026#34; . }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","excerpt":"By default, a site using Docsy has the theme's default fonts, colors, and general look and feel. …","ref":"/docs/adding-content/lookandfeel/","title":"Look and Feel"},{"body":"Top-level menu The top level menu (the one that appears in the top navigation bar for the entire site) uses your site's main menu. All Hugo sites have a main menu array of menu entries, accessible via the .Site.Menus site variable and populatable via page front matter or your site's config.toml.\nTo add a page or section to this menu, add it to the site's main menu in either config.toml or in the destination page's front matter (in _index.md or _index.html for a section, as that's the section landing page). For example, here's how we added the Documentation section landing page to the main menu in this site:\n---title:\u0026#34;Docsy Documentation\u0026#34;linkTitle:\u0026#34;Documentation\u0026#34;menu:main:weight:20---The menu is ordered from left to right by page weight. So, for example, a section index or page with weight: 30 would appear after the Documentation section in the menu, while one with weight: 10 would appear before it.\nIf you want to add a link to an external site to this menu, add it in config.toml, specifying the weight.\n[[menu.main]]name=\u0026#34;GitHub\u0026#34;weight=50url=\u0026#34;https://github.com/google/docsy/\u0026#34;Adding a version drop-down Depending on your project's releases and versioning, you may want to let your users access \u0026ldquo;old\u0026rdquo; versions of your site (how you deploy your archived sites is up to you) to read about previous versions of your project.\nIf you add some [params.versions] in config.toml, the Docsy theme adds a version selector drop down to the top-level menu. You specify a URL and a name for each version you would like to add to the menu, as in the following example:\n# Add your release versions here [[params.versions]] version = \u0026quot;master\u0026quot; url = \u0026quot;https://master.kubeflow.org\u0026quot; [[params.versions]] version = \u0026quot;v0.2\u0026quot; url = \u0026quot;https://v0-2.kubeflow.org\u0026quot; [[params.versions]] version = \u0026quot;v0.3\u0026quot; url = \u0026quot;https://v0-3.kubeflow.org\u0026quot; (don't forget to add your current version so users can navigate back!)\nThe default version drop-down menu title is Releases. To change this, change the version_menu parameter in config.toml:\nversion_menu = \u0026quot;Releases\u0026quot; Adding a language drop-down If you configure more than one language in config.toml, the Docsy theme adds a language selector drop down to the top-level menu. Selecting a language takes the user to the translated version of the current page, or the home page for the given language.\nYou can find out more in Multi-language support.\nSection menu The section menu, as shown in the left side of the docs section, is automatically built from the content tree. Like the top-level menu, it is ordered by page or section index weight (or by page creation date if weight is not set), with the page or index's Title, or linkTitle if different, as its link title in the menu. If a section subfolder has pages other than _index.md or _index.html, those pages will appear as a submenu, again ordered by weight. For example, here's the metadata for this page showing its weight and title:\n---title:\u0026#34;Navigation and Search\u0026#34;linkTitle:\u0026#34;Navigation and Search\u0026#34;date:2017-01-05weight:3description:\u0026gt; Customize site navigation and search for your Docsy site.---To hide a page or section from the menu, set toc_hide: true in front matter.\nBy default, the section menu will show the current section fully expanded all the way down. This may make the left nav too long and difficult to scan for bigger sites. Try setting site param ui.sidebar_menu_compact = true in config.toml.\nBreadcrumb navigation Breadcrumb navigation is enabled by default. To disable breadcrumb navigation, set site param ui.breadcrumb_disable = true in config.toml.\nSite search options Docsy offers multiple options that let your readers search your site content, so you can pick one that suits your needs. You can choose from:\n Google Custom Search Engine (GCSE), the default option, which uses Google's index of your public site to generate a search results page. Algolia DocSearch, which uses Algolia's indexing and search mechanism, and provides an organized dropdown of search results when your readers use the search box. Algolia DocSearch is free for public documentation sites. Local search with Lunr, which uses Javascript to index and search your site without the need to connect to external services. This option doesn't require your site to be public.  If you enable any of these search options in your config.toml, a search box displays in the right of your top navigation bar. By default a search box also displays at the top of the section menu in the left navigation pane, which you can disable if you prefer, or if you're using a search option that only works with the top search box.\nBe aware that if you accidentally enable more than one search option in your config.toml you may get unexpected results (for example, if you have added the .js for Algolia DocSearch, you'll get Algolia results if you enable GCSE search but forget to disable Algolia search).\nDisabling the sidebar search box By default, the search box appears in both the top navigation bar and at the top of the sidebar left navigation pane. If you don't want the sidebar search box, set sidebar_search_disable to true in config.toml:\nsidebar_search_disable = true Configure search with a Google Custom Search Engine By default Docsy uses a Google Custom Search Engine (GCSE) to search your site. To enable this feature, you'll first need to make sure that you have built a public production version of your site, as otherwise your site won't be crawled and indexed.\nSetting up site search   Deploy your site and ensure that it's built with HUGO_ENV=\u0026quot;production\u0026quot;, as Google will only crawl and index Docsy sites built with this setting (you probably don't want your not-ready-for-prime-time site to be searchable!). You can specify this variable as a command line flag to Hugo:\n$ env HUGO_ENV=\u0026quot;production\u0026quot; hugo Alternatively, if you're using Netlify, you can specify it as a Netlify deployment setting in netlify.toml or the Netlify UI, along with the Hugo version. It may take a day or so before your site has actual search results available.\n  Create a Google Custom Search Engine for your deployed site by clicking New search engine on the Custom Search page and following the instructions. Make a note of the ID for your new search engine.\n  Add any further configuration you want to your search engine using the Edit search engine options. In particular you may want to do the following:\n Select Look and feel. Change from the default Overlay layout to Results only, as this option means your search results are embedded in your search page rather than appearing in a separate box. Click Save to save your changes. Edit the default result link behavior so that search results from your site don't open in a new tab. To do this, select Search Features - Advanced - Websearch Settings. In the Link Target field, type \u0026ldquo;_parent\u0026rdquo;. Click Save to save your changes.    Tip Your site search results should show up within a couple of days. If it takes longer than that, you can manually request that your site is indexed by submitting a sitemap through the Google Search Console.  Adding the search page Once you have your search engine set up, you can add the feature to your site:\n  Ensure you have a Markdown file in content/en/search.md (and one per other languages if needed) to display your search results. It only needs a title and layout: search, as in the following example:\n--- title: Search Results layout: search ---   Add your Google Custom Search Engine ID to the site params in config.toml. You can add different values per language if needed.\n# Google Custom Search Engine ID. Remove or comment out to disable search. gcs_engine_id = \u0026quot;011737558837375720776:fsdu1nryfng\u0026quot;   Disabling GCSE search If you don't specify a Google Custom Search Engine ID for your project and haven't enabled any other search options, the search box won't appear in your site. If you're using the default config.toml from the example site and want to disable search, just comment out or remove the relevant line.\nConfigure Algolia DocSearch As an alternative to GCSE, you can use Algolia DocSearch with this theme. Algolia DocSearch is free for public documentation sites.\nSign up for Algolia DocSearch Complete the form at https://community.algolia.com/docsearch/#join-docsearch-program.\nIf you are accepted to the program, you will receive the JavaScript code to add to your documentation site from Algolia by email.\nAdding Algolia DocSearch   Enable Algolia DocSearch in config.toml.\n# Enable Algolia DocSearch algolia_docsearch = true   Remove or comment out any GCSE ID in config.toml and ensure local search is set to false as you can only have one type of search enabled. See Disabling GCSE search.\n  Disable the sidebar search in config.toml as this is not currently supported for Algolia DocSearch. See Disabling the sidebar search box.\n  Add the JavaScript code provided to you by Algolia to the head and body of every page on your site. See Add code to head or before body end for details.\n  Update the inputSelector field in the body end Javascript with the appropriate CSS selector (e.g. .td-search-input to use the default CSS from this theme).\n  When you've completed these steps the Algolia search should be enabled on your site. Search results are displayed as a drop-down under the search box, so you don't need to add any search results page.\nConfigure local search with Lunr Lunr is a Javascript-based search option that lets you index your site and make it searchable without the need for external, server-side search services. This is a good option particularly for smaller or non-public sites.\nTo add Lunr search to your Docsy site:\n  Enable local search in config.toml.\n# Enable local search offlineSearch = true   Remove or comment out any GCSE ID in config.toml and ensure Algolia DocSearch is set to false, as you can only have one type of search enabled. See Disabling GCSE search.\n  Once you've completed these steps, local search is enabled for your site and results appear in a drop down when you use the search box.\nTip If you're testing this locally using Hugo’s local server functionality, you need to build your offline-search-index.xxx.json file first by running hugo. If you have the Hugo server running while you build offline-search-index.xxx.json, you may need to stop the server and restart it in order to see your search results.  ","excerpt":"Top-level menu The top level menu (the one that appears in the top navigation bar for the entire …","ref":"/docs/adding-content/navigation/","title":"Navigation and Search"},{"body":"","excerpt":"","ref":"/docs/adding-content/","title":"Content and Customization"},{"body":"","excerpt":"","ref":"/docs/open-web-api/","title":"The OmicIDX Web API"},{"body":"Rather than writing all your site pages from scratch, Hugo lets you define and use shortcodes. These are reusable snippets of content that you can include in your pages, often using HTML to create effects that are difficult or impossible to do in simple Markdown. Shortcodes can also have parameters that let you, for example, add your own text to a fancy shortcode text box. As well as Hugo's built-in shortcodes, Docsy provides some shortcodes of its own to help you build your pages.\nShortcode blocks The theme comes with a set of custom Page Block shortcodes that can be used to compose landing pages, about pages, and similar.\nThese blocks share some common parameters:\n height A pre-defined height of the block container. One of min, med, max, full, or auto. Setting it to full will fill the Viewport Height, which can be useful for landing pages. color The block will be assigned a color from the theme palette if not provided, but you can set your own if needed. You can use all of Bootstrap's color names, theme color names or a grayscale shade. Some examples would be primary, white, dark, warning, light, success, 300, blue, orange. This will become the background color of the block, but text colors will adapt to get proper contrast.  blocks/cover The blocks/cover shortcode creates a landing page type of block that fills the top of the page.\n{{\u0026lt; blocks/cover title=\u0026#34;Welcome!\u0026#34; image_anchor=\u0026#34;center\u0026#34; height=\u0026#34;full\u0026#34; color=\u0026#34;primary\u0026#34; \u0026gt;}} \u0026lt;div class=\u0026#34;mx-auto\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;btn btn-lg btn-primary mr-3 mb-4\u0026#34; href=\u0026#34;{{\u0026lt; relref \u0026#34;/docs\u0026#34; \u0026gt;}}\u0026#34;\u0026gt; Learn More \u0026lt;i class=\u0026#34;fas fa-arrow-alt-circle-right ml-2\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;a class=\u0026#34;btn btn-lg btn-secondary mr-3 mb-4\u0026#34; href=\u0026#34;https://example.org\u0026#34;\u0026gt; Download \u0026lt;i class=\u0026#34;fab fa-github ml-2 \u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;p class=\u0026#34;lead mt-5\u0026#34;\u0026gt;This program is now available in \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;AppStore!\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mx-auto mt-5\u0026#34;\u0026gt; {{\u0026lt; blocks/link-down color=\u0026#34;info\u0026#34; \u0026gt;}} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{\u0026lt; /blocks/cover \u0026gt;}} Note that the relevant shortcode parameters above will have sensible defaults, but is included here for completeness.\nHugo Tip  Using the bracket styled shortcode delimiter, \u0026gt;}}, tells Hugo that the inner content is HTML/plain text and needs no further processing. Changing the delimiter to %}} means Hugo will treat the content as Markdown. You can use both styles in your pages.\n     Parameter Default Description     title  The main display title for the block.   image_anchor     height  See above.   color  See above.    To set the background image, place an image with the word \u0026ldquo;background\u0026rdquo; in the name in the page's Page Bundle. For example, in our the example site the background image in the home page's cover block is featured-background.jpg, in the same directory.\nTip If you also include the word featured in the image name, e.g. my-featured-background.jpg, it will also be used as the Twitter Card image when shared.  For available icons, see Font Awesome.\nblocks/lead The blocks/lead block shortcode is a simple lead/title block with centred text and an arrow down pointing to the next section.\n{{%blocks/leadcolor=\u0026#34;dark\u0026#34;%}} TechOS is the OS of the future. Runs on **bare metal** in the **cloud**! {{%/blocks/lead%}}    Parameter Default Description     height  See above.   color  See above.    blocks/section The blocks/section shortcode is meant as a general-purpose content container. It comes in two \u0026ldquo;flavors\u0026rdquo;, one for general content and one with styling more suitable for wrapping a horizontal row of feature sections.\nThe example below shows a section wrapping 3 feature sections.\n{{\u0026lt;blocks/sectioncolor=\u0026#34;dark\u0026#34;\u0026gt;}} {{%blocks/featureicon=\u0026#34;fa-lightbulb\u0026#34;title=\u0026#34;Fastest OS **on the planet**!\u0026#34;%}} The new **TechOS** operating system is an open source project. It is a new project, but with grand ambitions. Please follow this space for updates! {{%/blocks/feature%}} {{%blocks/featureicon=\u0026#34;fab fa-github\u0026#34;title=\u0026#34;Contributions welcome!\u0026#34;url=\u0026#34;https://github.com/gohugoio/hugo\u0026#34;%}} We do a [Pull Request](https://github.com/gohugoio/hugo/pulls) contributions workflow on **GitHub**. New users are always welcome! {{%/blocks/feature%}} {{%blocks/featureicon=\u0026#34;fab fa-twitter\u0026#34;title=\u0026#34;Follow us on Twitter!\u0026#34;url=\u0026#34;https://twitter.com/GoHugoIO\u0026#34;%}} For announcement of latest features etc. {{%/blocks/feature%}} {{\u0026lt;/blocks/section\u0026gt;}}    Parameter Default Description     height  See above.   color  See above.   type  Specify \u0026ldquo;section\u0026rdquo; if you want a general container, omit this parameter if you want this section to contain a horizontal row of features.    blocks/feature {{%blocks/featureicon=\u0026#34;fab fa-github\u0026#34;title=\u0026#34;Contributions welcome!\u0026#34;url=\u0026#34;https://github.com/gohugoio/hugo\u0026#34;%}} We do a [Pull Request](https://github.com/gohugoio/hugo/pulls) contributions workflow on **GitHub**. New users are always welcome! {{%/blocks/feature%}}    Parameter Default Description     title  The title to use.   url  The URL to link to.   icon  The icon class to use.    blocks/link-down The blocks/link-down shortcode creates a navigation link down to the next section. It's meant to be used in combination with the other blocks shortcodes.\n\u0026lt;div class=\u0026#34;mx-auto mt-5\u0026#34;\u0026gt; {{\u0026lt;blocks/link-downcolor=\u0026#34;info\u0026#34;\u0026gt;}} \u0026lt;/div\u0026gt;    Parameter Default Description     color info See above.    Shortcode helpers alert The alert shortcode creates an alert block that can be used to display notices or warnings.\n{{%alerttitle=\u0026#34;Warning\u0026#34;color=\u0026#34;warning\u0026#34;%}} This is a warning. {{%/alert%}} Renders to:\nWarning This is a warning.     Parameter Default Description     color primary One of the theme colors, eg primary, info, warning etc.    pageinfo The pageinfo shortcode creates a text box that you can use to add banner information for a page: for example, letting users know that the page contains placeholder content, that the content is deprecated, or that it documents a beta feature.\n{{%pageinfocolor=\u0026#34;primary\u0026#34;%}} This is placeholder content. {{%/pageinfo%}} Renders to:\nThis is placeholder content\n    Parameter Default Description     color primary One of the theme colors, eg primary, info, warning etc.    imgproc The imgproc shortcode finds an image in the current Page Bundle and scales it given a set of processing instructions.\n{{\u0026lt;imgprocspruceFill\u0026#34;400x450\u0026#34;\u0026gt;}} Norway Spruce Picea abies shoot with foliage buds. {{\u0026lt;/imgproc\u0026gt;}}  Norway Spruce Picea abies shoot with foliage buds. Photo: Bjørn Erik Pedersen / CC-BY-SA\n  The example above has also a byline with photo attribution added. When using illustrations with a free license from WikiMedia and simlilar, you will in most situations need a way to attribute the author or licensor. You can add metadata to your page resources in the page front matter. The byline param is used by convention in this theme:\nresources:-src:\u0026#34;**spruce*.jpg\u0026#34;params:byline:\u0026#34;Photo: Bjørn Erik Pedersen / CC-BY-SA\u0026#34;   Parameter Description     1 The image filename or enough of it to identify it (we do Glob matching)   2 Command. One of Fit, Resize or Fill. See Image Processing Methods.   3 Processing options, e.g. 400x450. See Image Processing Options.    swaggerui The swaggerui shortcode can be placed anywhere inside a page with the swagger layout; it renders Swagger UI using any OpenAPI YAML or JSON file as source. This can be hosted anywhere you like, for example in your site's root /static folder.\n---title:\u0026#34;Pet Store API\u0026#34;type:swaggerweight:1description:ReferenceforthePetStoreAPI--- {{\u0026lt; swaggerui src=\u0026#34;/openapi/petstore.yaml\u0026#34; \u0026gt;}}You can customize Swagger UI's look and feel by overriding Swagger's CSS or by editing and compiling a Swagger UI dist yourself and replace themes/docsy/static/css/swagger-ui.css.\n","excerpt":"Rather than writing all your site pages from scratch, Hugo lets you define and use shortcodes. These …","ref":"/docs/adding-content/shortcodes/","title":"Docsy Shortcodes"},{"body":"Add your logo Add your project logo as assets/icons/logo.svg in your project. This overrides the default Docsy logo in the theme. If you don't want a project logo, set navbar_logo to false (or delete the variable) in your config.toml:\nnavbar_logo = false If you decide at a later stage that you'd like to add a logo to your navbar, you can set the parameter to true:\nnavbar_logo = true  Tip Your logo is included in the default Docsy navbar as an inline SVG with the following CSS styling (from _nav.scss):\nsvg { display: inline-block; margin: 0 10px; height: 30px; } To ensure your logo displays correctly, you may want to resize it, ensure it doesn't have height and width attributes so that its size is fully responsive, or override the default styling with your own CSS.\n Add your favicons The easiest way to do this is to create a set of favicons via http://cthedot.de/icongen (which lets you create a huge range of icon sizes and options from a single image) and/or https://favicon.io/, and put them in your site project's static/favicons directory. This will override the default favicons from the theme.\nNote that https://favicon.io/ doesn't create as wide a range of sizes as Icongen but does let you quickly create favicons from text: if you want to create text favicons you can use this site to generate them, then use Icongen to create more sizes (if necessary) from your generated .png file.\nIf you have special favicon requirements, you can create your own layouts/partials/favicons.html with your links.\nAdd images Landing pages Docsy's blocks/cover shortcode make it easy to add large cover images to your landing pages. The shortcode looks for an image with the word \u0026ldquo;background\u0026rdquo; in the name inside the landing page's Page Bundle - so, for example, if you've copied the example site, the landing page image in content/en/_index.html is content/en/featured-background.jpg.\nYou specify the preferred display height of a cover block container (and hence its image) using the block's height parameter. For a full viewport height, use full:\n{{\u0026lt; blocks/cover title=\u0026#34;Welcome to the Docsy Example Project!\u0026#34; image_anchor=\u0026#34;top\u0026#34; height=\u0026#34;full\u0026#34; color=\u0026#34;orange\u0026#34; \u0026gt;}} ... {{\u0026lt; /blocks/cover \u0026gt;}} For a shorter image, as in the example site's About page, use one of min, med, max or auto (the actual height of the image):\n{{\u0026lt; blocks/cover title=\u0026#34;About the Docsy Example\u0026#34; image_anchor=\u0026#34;bottom\u0026#34; height=\u0026#34;min\u0026#34; \u0026gt;}} ... {{\u0026lt; /blocks/cover \u0026gt;}} Other pages To add inline images to other pages, use the imgproc shortcode. Alternatively, if you prefer, just use regular Markdown or HTML images and add your image files to your project's static directory. You can find out more about using this directory in Adding static content.\nImages used on this site Images used as background images in this site are in the public domain and can be used freely. The porridge image in the example site is by iha31 from Pixabay\n","excerpt":"Add your logo Add your project logo as assets/icons/logo.svg in your project. This overrides the …","ref":"/docs/adding-content/iconsimages/","title":"Logos and Images"},{"body":"Adding Analytics The Docsy theme contains built-in support for Google Analytics via Hugo's internal template, which is included in the theme. Once you set Analytics up as described below, usage information for your site (such as page views) is sent to your Google Analytics account.\nSetup   Ensure you have set up a Google Analytics property for your site: this gives you an Analytics ID to add to your config, which Docsy in turn adds to all your site's pages.\n  Open config.toml.\n  Enable Google Analytics by setting the Tracking ID property to your site's Analytics ID.\n [services.googleAnalytics] id = \u0026quot;UA-00000000-0\u0026quot;    Save and close config.toml.\n  Ensure that your site is built with HUGO_ENV=\u0026quot;production\u0026quot;, as Docsy only adds Analytics tracking to production-ready sites. You can specify this variable as a command line flag to Hugo:\n$ env HUGO_ENV=\u0026quot;production\u0026quot; hugo Alternatively, if you're using Netlify, you can specify it as a Netlify deployment setting in netlify.toml or the Netlify UI, along with the Hugo version.\n  User Feedback By default Docsy puts a \u0026ldquo;was this page helpful?\u0026rdquo; feedback widget at the bottom of every documentation page, as shown in Figure 1.\n Figure 1. The feedback widget, outlined in red  After clicking Yes the user should see a response like Figure 2. You can configure the response text in config.toml.\n  Figure 2. An example Yes response   How is this data useful? When you have a lot of documentation, and not enough time to update it all, you can use the \u0026ldquo;was this page helpful?\u0026rdquo; feedback data to help you decide which pages to prioritize. In general, start with the pages with a lot of pageviews and low ratings. \u0026ldquo;Low ratings\u0026rdquo; in this context means the pages where users are clicking No \u0026mdash; the page wasn't helpful \u0026mdash; more often than Yes \u0026mdash; the page was helpful. You can also study your highly-rated pages to develop hypotheses around why your users find them helpful.\nIn general, you can develop more certainty around what patterns your users find helpful or unhelpful if you introduce isolated changes in your documentation whenever possible. For example, suppose that you find a tutorial that no longer matches the product. You update the instructions, check back in a month, and the score has improved. You now have a correlation between up-to-date instructions and higher ratings. Or, suppose you study your highly-rated pages and discover that they all start with code samples. You find 10 other pages with their code samples at the bottom, move the samples to the top, and discover that each page's score has improved. Since this was the only change you introduced on each page, it's more reasonable to believe that your users find code samples at the top of pages helpful. The scientific method, applied to technical writing, in other words!\nSetup   Open config.toml.\n  Ensure that Google Analytics is enabled, as described above.\n  Set the response text that users see after clicking Yes or No.\n [params.ui.feedback] enable = true yes = 'Glad to hear it! Please \u0026lt;a href=\u0026quot;https://github.com/USERNAME/REPOSITORY/issues/new\u0026quot;\u0026gt;tell us how we can improve\u0026lt;/a\u0026gt;.' no = 'Sorry to hear that. Please \u0026lt;a href=\u0026quot;https://github.com/USERNAME/REPOSITORY/issues/new\u0026quot;\u0026gt;tell us how we can improve\u0026lt;/a\u0026gt;.'    Save and close config.toml.\n  Access the feedback data This section assumes basic familiarity with Google Analytics. For example, you should know how to check pageviews over a certain time range and navigate between accounts if you have access to multiple documentation sites.\n Open Google Analytics. Open Behavior \u0026gt; Events \u0026gt; Overview. In the Event Category table click the Helpful row. Click view full report if you don't see the Helpful row. Click Event Label. You now have a page-by-page breakdown of ratings.  Here's what the 4 columns represent:\n Total Events is the total number of times that users clicked either Yes or No. Unique Events provides a rough indication of how frequenly users are rating your pages per session. For example, suppose your Total Events is 5000, and Unique Events is 2500. This means that you have 2500 users who are rating 2 pages per session. Event Value isn't that useful. Avg. Value is the aggregated rating for that page. The value is always between 0 and 1. When users click No a value of 0 is sent to Google Analytics. When users click Yes a value of 1 is sent. You can think of it as a percentage. If a page has an Avg. Value of 0.67, it means that 67% of users clicked Yes and 33% clicked No.  The underlying Google Analytics infrastructure that stores the \u0026ldquo;was this page helpful?\u0026rdquo; data is called Events. See docsy pull request #1 to see exactly what happens when a user clicks Yes or No. It's just a click event listener that fires the Google Analytics JavaScript function for logging an Event, disables the Yes and No buttons, and shows the response text.\nDisable feedback on a single page Add hide_feedback: true to the page's front matter.\nDisable feedback on all pages Set params.ui.feedback.enable to false in config.toml:\n[params.ui.feedback] enable = false  ","excerpt":"Adding Analytics The Docsy theme contains built-in support for Google Analytics via Hugo's internal …","ref":"/docs/adding-content/feedback/","title":"Analytics and User Feedback"},{"body":"If you'd like to provide site content in multiple languages, the Docsy theme and Hugo make it easy to both add your translated content and for your users to navigate between language versions.\nContent and configuration To add content in multiple languages, you first need to define the available languages in a languages section in your site configuration. Each language can have its own language-specific configuration. For example, the Docsy Example Site config specifies that it provides content in English and Norwegian, and that the language version visitors will see by default is English:\ncontentDir = \u0026#34;content/en\u0026#34; defaultContentLanguage = \u0026#34;en\u0026#34; defaultContentLanguageInSubdir = false ... [languages] [languages.en] title = \u0026#34;Docsy\u0026#34; description = \u0026#34;Docsy does docs\u0026#34; languageName =\u0026#34;English\u0026#34; # Weight used for sorting. weight = 1 [languages.no] title = \u0026#34;Docsy\u0026#34; description = \u0026#34;Docsy er operativsystem for skyen\u0026#34; languageName =\u0026#34;Norsk\u0026#34; contentDir = \u0026#34;content/no\u0026#34; time_format_default = \u0026#34;02.01.2006\u0026#34; time_format_blog = \u0026#34;02.01.2006\u0026#34; Any setting not defined in a [languages] block will fall back to the global value for that setting: so, for example, the content directory used for the site above will be content/en unless the user selects the Norwegian language option.\nOnce you've updated your site config, you create a content root directory for each language version in your source repo, such as content/en for English text, and add your content as usual. See the Hugo Docs on multi-language support for more information.\nTip If there's any possibility your site might be translated into other languages, consider creating your site with your content in a language-specific subdirectory, as it means you don't need to move it if you add another language.  For adding multiple language versions of other site elements such as button text, see the internationalization bundles section below.\nSelecting a language If you configure more than one language in config.toml, the Docsy theme adds a language selector drop down to the top-level menu. Selecting a language takes the user to the translated version of the current page, or the home page for the given language.\nInternationalization bundles All UI strings (text for buttons etc.) are bundled inside /i18n in the theme, with a .toml file for each language.\nIf your chosen language isn't currently in the theme and you create your own .toml file for all the common UI strings (for example, if you translate the UI text into Japanese and create a copy of en.toml called jp.toml), we recommend you do this in the theme rather than in your own project, so it can be reused by others. Any additional strings or overridden values can be added to your project's /i18n folder.\nHugo Tip Run hugo server --i18n-warnings when doing translation work, as it will give you warnings on what strings are missing.  ","excerpt":"If you'd like to provide site content in multiple languages, the Docsy theme and Hugo make it easy …","ref":"/docs/language/","title":"Multi-language Support"},{"body":"There are multiple possible options for deploying a Hugo site, including Netlify, Firebase Hosting, Bitbucket with Aerobatic, and more; you can read about them all in Hosting and Deployment. Hugo also makes it easy to deploy your site locally for quick previews of your content.\nServing your site locally Depending on your deployment choice you may want to serve your site locally during development to preview content changes. To serve your site locally:\n  Ensure you have an up to date local copy of your site files cloned from your repo. Don't forget to use --recurse-submodules or you won't pull down some of the code you need to generate a working site.\ngit clone --recurse-submodules --depth 1 https://github.com/my/example.git  Note If you've just added the theme as a submodule in a local version of your site and haven't committed it to a repo yet, you must get local copies of the theme's own submodules before serving your site.\ngit submodule update --init --recursive     Ensure you have the tools described in Installation and Prerequisites installed on your local machine, including postcss-cli (you'll need it to generate the site resources the first time you run the server).\n  Run the hugo server command in your site root. By default your site will be available at http://localhost:1313/.\n  Now that you're serving your site locally, Hugo will watch for changes to the content and automatically refresh your site. If you have more than one local git branch, when you switch between git branches the local website reflects the files in the current branch.\nDeployment with Netlify We recommend using Netlify as a particularly simple way to serve your site from your Git provider (GitHub, GitLab, or BitBucket), with continuous deployment, previews of the generated site when you or your users create pull requests against the doc repo, and more. Netlify is free to use for Open Source projects, with premium tiers if you require greater support.\nFollow the instructions in Host on Netlify to set up a Netlify account (if you don't have one already) and authorize access to your GitHub or other Git provider account. Once you're logged in:\n Click New site from Git. Click your chosen Git provider, then choose your site repo from your list of repos. In the Deploy settings page:  For your Build command, specify cd themes/docsy \u0026amp;\u0026amp; git submodule update -f --init \u0026amp;\u0026amp; cd ../.. \u0026amp;\u0026amp; hugo. You need to specify this rather than just hugo so that Netlify can use the theme's submodules. Click Show advanced. In the Advanced build settings section, click New variable. Specify HUGO_VERSION as the Key for the new variable, and 0.53 or later as its Value.   Click Deploy site.  If you have an existing deployment you can view and update the relevant information by selecting the site from your list of sites in Netlify, then clicking Site settings - Build and deploy. Ensure that Ubuntu Xenial 16.04 is selected in the Build image selection section - if you're creating a new deployment this is used by default. You need to use this image to run the extended version of Hugo.\n","excerpt":"There are multiple possible options for deploying a Hugo site, including Netlify, Firebase Hosting, …","ref":"/docs/deployment/","title":"Previews and Deployment"},{"body":"One of the best ways to see what Docsy can do, and learn how to configure a site with it, is to see some real projects. In addition to our provided Docsy Example Project, there are several live sites already using the theme. Please add your own examples once you've got a production site up and running with Docsy!\nDocsy theme examples Example sites that have low to no customization:\n   Site Repo (if public)     This Docsy documentation site https://github.com/google/docsy   \u0026ldquo;Goldydocs\u0026rdquo; - a Docsy example site https://github.com/google/docsy-example   https://www.kubeflow.org/ https://github.com/kubeflow/website   https://agones.dev/site/ https://github.com/GoogleCloudPlatform/agones/tree/master/site    Customized Docsy examples Example sites that include a moderate to high amount of customization:\n   Site Repo (if public)     Knative https://github.com/knative/docs and https://github.com/knative/website   Apache Airflow https://github.com/apache/airflow-site/    ","excerpt":"One of the best ways to see what Docsy can do, and learn how to configure a site with it, is to see …","ref":"/docs/examples/","title":"Examples"},{"body":"The Docsy docs and blog layouts include links for readers to edit the page or create issues for your docs or project via your site's source repository. The current generated links for each docs or blog page are:\n Edit this page: Brings the user to an editable version of the page content in their fork (if available) of your docs repo. If the user doesn't have a current fork of your docs repo, they are invited to create one before making their edit. The user can then create a pull request for your docs. Create documentation issue: Brings the user to a new issue form in your docs repo with the name of the current page as the issue's title. Create project issue (optional): Brings the user to a new issue form in your project repo. This can be useful if you have separate project and docs repos and your users want to file issues against the project feature being discussed rather than your docs.  This page shows you how to configure these links using your config.toml file.\nCurrently Docsy supports only GitHub repository links \u0026ldquo;out of the box\u0026rdquo;. If you are using another repository such as Bitbucket and would like generated repository links, feel free to add a feature request or update our theme.\nLink configuration There are three variables you can configure in config.toml to set up links:\ngithub_repo The URL for your site's source repository. This is used to generate the Edit this page and Create documentation issue links.\ngithub_repo = \u0026#34;https://github.com/google/docsy\u0026#34; github_subdir (optional) Specify a value here if your content directory is not in your repo's root directory. For example, this site is in the userguide subdirectory of its repo. Setting this value means that your edit links will go to the right page.\ngithub_subdir = \u0026#34;userguide\u0026#34; github_project_repo (optional) Specify a value here if you have a separate project repo and you'd like your users to be able to create issues against your project from the relevant docs. The Create project issue link appears only if this is set.\ngithub_project_repo = \u0026#34;https://github.com/google/docsy\u0026#34; ","excerpt":"The Docsy docs and blog layouts include links for readers to edit the page or create issues for your …","ref":"/docs/adding-content/repository-links/","title":"Repository Links"},{"body":"We hope to continue to make improvements to the theme along with the Docsy community. If you have cloned the example site (or are otherwise using the theme as a submodule), you can update the Docsy theme yourself.\nUpdating Docsy means that your site will build using the latest version of Docsy at HEAD and include all the new commits or changes that have been merged since the point in time that you initially added the Docsy submodule, or last updated. Updating won't affect any modifications that you made in your own project to override the Docsy look and feel, as your overrides don't modify the theme itself. For details about what has changed in the theme, see the list of Docsy commits.\nDepending on how you chose to use Docsy, follow the corresponding steps to update the theme:\nUpdate a Docsy submodule If you are using the Docsy theme as a submodule in your project (for example, if you've copied our example site), you update the submodule:\n  Navigate to the root of your local project, then run:\n git submodule update --remote    Add and then commit the change to your project:\n git add themes/ git commit -m \u0026quot;Updating theme submodule\u0026quot;    Push the commit to your project repo. For example, run:\n git push origin master    Update your Docsy clone If you cloned the Docsy theme into the themes folder in your project, then you use the git pull command:\n  Navigate to the themes directory in your local project:\n cd themes    Ensure that origin is set to https://github.com/google/docsy.git:\n git remote -v    Update your local clone:\n git pull origin master    If you have made any local changes to the cloned theme, you must manually resolve any merge conflicts.\n","excerpt":"We hope to continue to make improvements to the theme along with the Docsy community. If you have …","ref":"/docs/updating/","title":"Updating Docsy"},{"body":"Use this section to learn about some of the best practices around creating technical documentation with Docsy.\n","excerpt":"Use this section to learn about some of the best practices around creating technical documentation …","ref":"/docs/best-practices/","title":"Best Practices"},{"body":"Docsy is an open source project and we love getting patches and contributions to make Docsy and its docs even better.\nContributing to Docsy The Docsy theme itself lives in https://github.com/google/docsy.\nContributor License Agreement Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution; this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://cla.developers.google.com/ to see your current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again.\nCode reviews All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.\nPreviewing your changes As Docsy is a theme rather than a site, you can't serve the theme directly to check your changes work. Instead use your updated local theme in a local copy of the Docsy example site (copy or make your changes in the themes/docsy directory) and preview from there. Alternatively, clone the Docsy theme repo and test your changes in a local copy of this site, as described below.\nCommunity guidelines This project follows Google's Open Source Community Guidelines.\nCreating issues Alternatively, if there's something you'd like to see in Docsy (or if you've found something that isn't working the way you'd expect), but you're not sure how to fix it yourself, please create an issue.\nContributing to these docs This user guide is, like our example site, a Docsy site that uses the Hugo static site generator. We welcome updates to the docs!\nWe use Netlify to manage the deployment of the site and provide previews of doc updates. The instructions here assume you're familiar with basic GitHub workflows.\nQuick start with Netlify  Fork the Docsy repo on GitHub: this site's files live in the userguide subdirectory. Make your changes and send a pull request (PR). If you're not yet ready for a review, add \u0026ldquo;WIP\u0026rdquo; to the PR name to indicate it's a work in progress. (Don't add the Hugo property \u0026ldquo;draft = true\u0026rdquo; to the page front matter, because that prevents the auto-deployment of the content preview described in the next point.) Wait for the automated PR workflow to do some checks. When it's ready, you should see a comment like this: deploy/netlify — Deploy preview ready! Click Details to the right of \u0026ldquo;Deploy preview ready\u0026rdquo; to see a preview of your updates. Continue updating your doc and pushing your changes until you're happy with the content. When you're ready for a review, add a comment to the PR, and remove any \u0026ldquo;WIP\u0026rdquo; markers.  Updating a single page If you've just spotted something you'd like to change while using the docs, Docsy has a shortcut for you:\n Click Edit this page in the top right hand corner of the page. If you don't already have an up to date fork of the project repo, you are prompted to get one - click Fork this repository and propose changes or Update your Fork to get an up to date version of the project to edit. The appropriate page in your fork is displayed in edit mode. Follow the rest of the Quick start with Netlify process above to make and preview your changes.  Previewing your changes locally If you want to run your own local Hugo server to preview your changes as you work:\n  Follow the instructions in Getting started to install Hugo and any other tools you need.\n  Fork the Docsy repo into your own project, then create a local copy using git clone. Don’t forget to use --recurse-submodules or you won’t pull down some of the code you need to generate a working site.\ngit clone --recurse-submodules --depth 1 https://github.com/google/docsy.git   Change to the userguide directory and run the following Hugo command to build the site and start the Hugo server. Note that you need the themesDir flag because the site files are inside the theme repo.\ncd userguide hugo server --themesDir ../.. By default your site will be available at http://localhost:1313/. Now that you're serving your site locally, Hugo will watch for changes to the content and automatically refresh your site.\n  Continue with the usual GitHub workflow to edit files, commit them, push the changes up to your fork, and create a pull request.\n  Creating an issue If there's something you'd like to see in the docs, but you're not sure how to fix it yourself, please create an issue in [this repository](wherever it goes). You can also create an issue about a specific page by clicking the Create Issue button in the top right hand corner of the page.\n","excerpt":"Docsy is an open source project and we love getting patches and contributions to make Docsy and its …","ref":"/docs/contribution-guidelines/","title":"Contribution Guidelines"},{"body":"Docsy is a theme for the Hugo static site generator. If you're not already familiar with Hugo and, in particular, its version of Markdown, this page provides some useful tips and potential gotchas for adding and editing content for your site. Feel free to add your own!\nNested lists Hugo currently uses the Blackfriday Markdown processor, which can be sensitive when it come to content that's deeply nested in a list. In particular, be aware that this known issue can surface if or when you have multiple authors and other contributors who might mix \u0026lsquo;tabs\u0026rsquo; and \u0026lsquo;spaces\u0026rsquo; when indenting lists, or fail to indent properly.\nAn additional factor here is that because GitHub uses a different Markdown processor, GitHub markdown and the editor UI may render some nested lists properly, while Blackfriday might render that same content poorly. For example, the count in a numbered list might restart, or your nested content within a list is not indented (shows as a peer element instead of a nested child element). You may want to recommend in your contribution guidelines (as we do) that contributors preview their content with Hugo (or use Netlify's preview feature for PRs if that's your chosen deployment tool) to ensure their content renders correctly with Blackfriday.\nTip Per comments on the known issue, some users have found that using 4 spaces instead of a \u0026lsquo;tab\u0026rsquo; results in consistent behavior. For example, consider configuring your local editor to use 4 spaces when the Tab key is pressed.  Linking By default, regular relative URLs in links are left unchanged by Hugo (they're still relative links in your site's generated HTML), hence some hardcoded relative links like [relative cross-link](../../peer-folder/sub-file.md) might behave unexpectedly compared to how they work on your local file system. You may find it helpful to use some of Hugo's built-in link shortcodes to avoid broken links in your generated site. For example a {\u0026lt; ref \u0026quot;filename.md\u0026quot; \u0026gt;} link in Hugo will actually find and automatically link to your file named filename.md.\nNote, however, that ref and relref links don't work with _index or index files (for example, this site's content landing page): you'll need to use regular Markdown links to section landing or other index pages. Specify these links relative to the site's root URL, for example: /docs/adding-content/.\nLearn more about linking.\n","excerpt":"Docsy is a theme for the Hugo static site generator. If you're not already familiar with Hugo and, …","ref":"/docs/best-practices/site-guidance/","title":"Hugo Content Tips"},{"body":"If you have a look at our Example Site, you'll see that we've organized the Documentation section into a number of subsections, each with some recommendations about what you might put in that section.\nDo I need to use this structure? Absolutely not! The site structure in the Example Site was created to meet the needs of large docsets for large products with lots of features, potential tasks, and reference elements. For a simpler docset (like this one!), it's fine to just structure your docs around specific features that your users need to know about. Even for larger documentation sets, you may find that the structure isn't useful \u0026ldquo;as is\u0026rdquo;, or that you don't need to use all the section types.\nWe do recommend that (as we've done here) you provide at least:\n An Overview of the product (either on the docs landing page or a separate Overview page) that tells the user why they should be interested in your project. A Getting Started page. Some Examples.  You may also want to create some tasks/how-tos for your project's features. Feel free to copy this Docsy user guide site or even just the docs section instead if you like this simpler structure better.\nTip If you want to copy this guide, be aware that its source files are inside the Docsy theme repo, and so it doesn't have its own themes/ directory: instead, we run hugo server --themesDir ../.. to use Docsy from its parent directory. You may want to either copy the site and add a themes/ directory with Docsy, or just copy the docs/ folder into your existing site's content root.  Learn more about how Hugo and Docsy use folders and other files to organize your site.\nWhy this structure? We based the Example Site structure on our own experiences creating (and using) large documentation sets for different types of project and on user research carried out on some of our bigger sites. In user studies we saw that users cared most about and immediately looked for a Get Started or Getting Started section (so they could, well, get started), and some examples to explore and copy, so we made those into prominent top-level doc sections in our site. Users also wanted to find \u0026ldquo;recipes\u0026rdquo; that they could easily look up to perform specific tasks and put together to create their own applications or projects, so we suggest that you add this kind of content as Tasks. Other content types such as conceptual docs, reference docs, and end-to-end tutorials are less important for all doc sets, particularly for smaller projects. We emphasize in our Example Site that these sections are optional.\nWe hope to improve the Example Site structure further as we learn more about how users interact with technical documentation, particularly for Open Source projects.\nWriting style guide This guide and the example site just address how to organize your documentation content into pages and sections. For some guidance on how to organize and write the content in each page, we recommend the Google Developer Documentation Style Guide, particularly the Style Guide Highlights.\n","excerpt":"If you have a look at our Example Site, you'll see that we've organized the Documentation section …","ref":"/docs/best-practices/organizing-content/","title":"Organizing Your Content"},{"body":" The REST API RESTful Concepts Before focusing on any jargon or getting hung up on semantics, in the case of the OmicIDX REST API, three components to the system are important.\nThe first is that REST systems are typically composed of resources. Any information that can be named can be a resource: a document or image, a temporal service, a collection of other resources, a non-virtual object (e.g. a person), and so on. In the OmicIDX case, typical resources are things like:\n SRA Runs SRA Studies Biosample Sample records SRA Experiments SRA Samples GEO Platforms GEO Samples GEO Series (studies)  REST uses a resource identifier to “name” the particular resource involved in an interaction. In OmicIDX, these resource identifiers are typically accessions, like SRR000273, SRX000273, or SAMND00000001.\nA REST API accesses resources via http calls. For example, to access a specific SRA study record, one can use a URL like:\nhttps://api.omicidx.cancerdatasci.org/sra/studies/SRP014892\nAccessing the URL from the linux command-line program using a program like curl leads to facile programmatic access. More on programmatic access follows.\nREST is acronym for REpresentational State Transfer. It is architectural style for distributed systems and was first presented by Roy Fielding in 2000 in his famous dissertation.\n Retrieving records by accession All of the common public omics data repositories include accessions for their records. These accessions serve as keys in OmicIDX, so they can be reused easily for quick lookup of records. When the accession is known (such as when you find the accession in a pubmed abstract), retrieving the metadata for that accession is a common task. OmicIDX uses accessions from the original database, so eee table 1 for examples of what to look for.\n Table 1:  This table outlines the resources and the resource identifiers, or accessions, in OmicIDX. Note how the format of the accessions differs across resources. The “type of record” column has multiple Sample entries, for example, but each repository (GEO, SRA, Biosample, etc.) has a unique data model. More details on the data models are in the [SRA], [GEO], and [Biosample] sections.  Database Example accession Type of record    SRA SRP012682 Study  SRA SRS357840 Sample  SRA SRX178456 Experiment  SRA SRR543404 Run  Biosample SAMD00000001 Sample  GEO GSM10 Sample  GEO GSE2553 Study (or Series)  GEO GPL96 Platform    Get an individual record by accession URLs for accessing individual records in OmicIDX follow a standard form and are easy to construct. See Figure 1 for details.\nknitr::include_graphics(\u0026#39;imgs/url_diagram.png\u0026#39;)  Figure 1: OmicIDX URLs to access omics metadata resources by accession follow a pattern. In the diagramatic representation of an OmicIDX URL, box 1 is the server name. Box 2 is the originating database which is, in this case, the [SRA] database. Box 3 is the name of the resource within the originating database, here the studies collection. Finally, box 4 is the accession. Note that no / follows the accession.  For example, the SRA accession for the GTeX study is SRP012682. This accession comes from the sra database and is a study, so we query the following URL:\n https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682  Clicking on the link will return JSON results for the study record for the GTeX study. Alternatively, one can use curl on the command line to access the same URL.\ncurl -s \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682\u0026#39; While curl will work fine to get results, the httpie tool is a friendlier tool for querying web APIs. Installation is straightforward.\nhttp \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682\u0026#39; \\ --pretty format ## { ## \u0026quot;BioProject\u0026quot;: \u0026quot;PRJNA75899\u0026quot;, ## \u0026quot;abstract\u0026quot;: \u0026quot;Lay Description. The aim of the Genotype-Tissue Expression (GTEx) Project is to increase our understanding of how changes in our genes affect human health and disease with the ultimate goal of improving health care for future generations. GTEx will create a database that researchers can use to study how inherited changes in genes lead to common diseases. GTEx researchers are studying genes in different tissues obtained from many different people. The GTEx project also includes a study of the GTEx donor consent process - this study will help ensure that the consent process and other aspects of the project effectively address the concerns and expectations of participants in the study. GTEx is a pioneering project that uses state-of-the-art protocols for obtaining and storing a large range of organs and tissues, and for testing them in the lab. Until now, no project has analyzed genetic variation and expression in as many tissues from the same person in... (for more see dbGaP study page.)\u0026quot;, ## \u0026quot;accession\u0026quot;: \u0026quot;SRP012682\u0026quot;, ## \u0026quot;alias\u0026quot;: \u0026quot;phs000424\u0026quot;, ## \u0026quot;attributes\u0026quot;: [ ## { ## \u0026quot;tag\u0026quot;: \u0026quot;parent_bioproject\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;PRJNA75897\u0026quot; ## } ## ], ## \u0026quot;center_name\u0026quot;: \u0026quot;dbGaP\u0026quot;, ## \u0026quot;experiment_count\u0026quot;: \u0026quot;24588\u0026quot;, ## \u0026quot;identifiers\u0026quot;: [ ## { ## \u0026quot;id\u0026quot;: \u0026quot;PRJNA75899\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;BioProject\u0026quot; ## }, ## { ## \u0026quot;id\u0026quot;: \u0026quot;phs000424\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;dbGaP\u0026quot; ## }, ## { ## \u0026quot;id\u0026quot;: \u0026quot;phs000424\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;dbGaP\u0026quot; ## } ## ], ## \u0026quot;insdc\u0026quot;: true, ## \u0026quot;lastupdate\u0026quot;: \u0026quot;2017-09-17T10:26:44\u0026quot;, ## \u0026quot;mean_bases_per_run\u0026quot;: 14030484634.422861, ## \u0026quot;published\u0026quot;: \u0026quot;2014-02-14T22:56:17\u0026quot;, ## \u0026quot;pubmed_ids\u0026quot;: [], ## \u0026quot;received\u0026quot;: \u0026quot;2012-05-04T15:43:05\u0026quot;, ## \u0026quot;run_count\u0026quot;: \u0026quot;24588\u0026quot;, ## \u0026quot;sample_count\u0026quot;: \u0026quot;14249\u0026quot;, ## \u0026quot;status\u0026quot;: \u0026quot;live\u0026quot;, ## \u0026quot;study_type\u0026quot;: \u0026quot;Other\u0026quot;, ## \u0026quot;taxon_ids\u0026quot;: [ ## \u0026quot;9606\u0026quot; ## ], ## \u0026quot;title\u0026quot;: \u0026quot;Genotype-Tissue Expression (GTEx) Common Fund Project\u0026quot;, ## \u0026quot;total_bases\u0026quot;: \u0026quot;343115501734811\u0026quot;, ## \u0026quot;total_spots\u0026quot;: \u0026quot;1698588305124\u0026quot; ## } The [httr] package is useful in R for accessing web resources. The following is a simple code example.\n# Requires the httr package # install.packages(\u0026#39;httr\u0026#39;) response = httr::GET(\u0026quot;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682\u0026quot;) content = httr::content(response) content ## $pubmed_ids ## list() ## ## $total_spots ## [1] \u0026quot;1698588305124\u0026quot; ## ## $identifiers ## $identifiers[[1]] ## $identifiers[[1]]$id ## [1] \u0026quot;PRJNA75899\u0026quot; ## ## $identifiers[[1]]$namespace ## [1] \u0026quot;BioProject\u0026quot; ## ## ## $identifiers[[2]] ## $identifiers[[2]]$id ## [1] \u0026quot;phs000424\u0026quot; ## ## $identifiers[[2]]$namespace ## [1] \u0026quot;dbGaP\u0026quot; ## ## ## $identifiers[[3]] ## $identifiers[[3]]$id ## [1] \u0026quot;phs000424\u0026quot; ## ## $identifiers[[3]]$namespace ## [1] \u0026quot;dbGaP\u0026quot; ## ## ## ## $taxon_ids ## $taxon_ids[[1]] ## [1] \u0026quot;9606\u0026quot; ## ## ## $experiment_count ## [1] \u0026quot;24588\u0026quot; ## ## $received ## [1] \u0026quot;2012-05-04T15:43:05\u0026quot; ## ## $abstract ## [1] \u0026quot;Lay Description. The aim of the Genotype-Tissue Expression (GTEx) Project is to increase our understanding of how changes in our genes affect human health and disease with the ultimate goal of improving health care for future generations. GTEx will create a database that researchers can use to study how inherited changes in genes lead to common diseases. GTEx researchers are studying genes in different tissues obtained from many different people. The GTEx project also includes a study of the GTEx donor consent process - this study will help ensure that the consent process and other aspects of the project effectively address the concerns and expectations of participants in the study. GTEx is a pioneering project that uses state-of-the-art protocols for obtaining and storing a large range of organs and tissues, and for testing them in the lab. Until now, no project has analyzed genetic variation and expression in as many tissues from the same person in... (for more see dbGaP study page.)\u0026quot; ## ## $accession ## [1] \u0026quot;SRP012682\u0026quot; ## ## $published ## [1] \u0026quot;2014-02-14T22:56:17\u0026quot; ## ## $title ## [1] \u0026quot;Genotype-Tissue Expression (GTEx) Common Fund Project\u0026quot; ## ## $mean_bases_per_run ## [1] 14030484634 ## ## $run_count ## [1] \u0026quot;24588\u0026quot; ## ## $center_name ## [1] \u0026quot;dbGaP\u0026quot; ## ## $study_type ## [1] \u0026quot;Other\u0026quot; ## ## $insdc ## [1] TRUE ## ## $sample_count ## [1] \u0026quot;14249\u0026quot; ## ## $alias ## [1] \u0026quot;phs000424\u0026quot; ## ## $attributes ## $attributes[[1]] ## $attributes[[1]]$value ## [1] \u0026quot;PRJNA75897\u0026quot; ## ## $attributes[[1]]$tag ## [1] \u0026quot;parent_bioproject\u0026quot; ## ## ## ## $total_bases ## [1] \u0026quot;343115501734811\u0026quot; ## ## $lastupdate ## [1] \u0026quot;2017-09-17T10:26:44\u0026quot; ## ## $BioProject ## [1] \u0026quot;PRJNA75899\u0026quot; ## ## $status ## [1] \u0026quot;live\u0026quot; In python, one might use the [requests] library to access the URL and retrieve the data into a python object.\n# requires the requests package be available # pip install requests import requests, pprint response = requests.get( \u0026quot;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682\u0026quot; ) pprint.pprint(response.json()) ## {\u0026#39;BioProject\u0026#39;: \u0026#39;PRJNA75899\u0026#39;, ## \u0026#39;abstract\u0026#39;: \u0026#39;Lay Description. The aim of the Genotype-Tissue Expression \u0026#39; ## \u0026#39;(GTEx) Project is to increase our understanding of how changes \u0026#39; ## \u0026#39;in our genes affect human health and disease with the ultimate \u0026#39; ## \u0026#39;goal of improving health care for future generations. GTEx will \u0026#39; ## \u0026#39;create a database that researchers can use to study how \u0026#39; ## \u0026#39;inherited changes in genes lead to common diseases. GTEx \u0026#39; ## \u0026#39;researchers are studying genes in different tissues obtained \u0026#39; ## \u0026#39;from many different people. The GTEx project also includes a \u0026#39; ## \u0026#39;study of the GTEx donor consent process - this study will help \u0026#39; ## \u0026#39;ensure that the consent process and other aspects of the project \u0026#39; ## \u0026#39;effectively address the concerns and expectations of \u0026#39; ## \u0026#39;participants in the study. GTEx is a pioneering project that \u0026#39; ## \u0026#39;uses state-of-the-art protocols for obtaining and storing a \u0026#39; ## \u0026#39;large range of organs and tissues, and for testing them in the \u0026#39; ## \u0026#39;lab. Until now, no project has analyzed genetic variation and \u0026#39; ## \u0026#39;expression in as many tissues from the same person in... (for \u0026#39; ## \u0026#39;more see dbGaP study page.)\u0026#39;, ## \u0026#39;accession\u0026#39;: \u0026#39;SRP012682\u0026#39;, ## \u0026#39;alias\u0026#39;: \u0026#39;phs000424\u0026#39;, ## \u0026#39;attributes\u0026#39;: [{\u0026#39;tag\u0026#39;: \u0026#39;parent_bioproject\u0026#39;, \u0026#39;value\u0026#39;: \u0026#39;PRJNA75897\u0026#39;}], ## \u0026#39;center_name\u0026#39;: \u0026#39;dbGaP\u0026#39;, ## \u0026#39;experiment_count\u0026#39;: \u0026#39;24588\u0026#39;, ## \u0026#39;identifiers\u0026#39;: [{\u0026#39;id\u0026#39;: \u0026#39;PRJNA75899\u0026#39;, \u0026#39;namespace\u0026#39;: \u0026#39;BioProject\u0026#39;}, ## {\u0026#39;id\u0026#39;: \u0026#39;phs000424\u0026#39;, \u0026#39;namespace\u0026#39;: \u0026#39;dbGaP\u0026#39;}, ## {\u0026#39;id\u0026#39;: \u0026#39;phs000424\u0026#39;, \u0026#39;namespace\u0026#39;: \u0026#39;dbGaP\u0026#39;}], ## \u0026#39;insdc\u0026#39;: True, ## \u0026#39;lastupdate\u0026#39;: \u0026#39;2017-09-17T10:26:44\u0026#39;, ## \u0026#39;mean_bases_per_run\u0026#39;: 14030484634.422861, ## \u0026#39;published\u0026#39;: \u0026#39;2014-02-14T22:56:17\u0026#39;, ## \u0026#39;pubmed_ids\u0026#39;: [], ## \u0026#39;received\u0026#39;: \u0026#39;2012-05-04T15:43:05\u0026#39;, ## \u0026#39;run_count\u0026#39;: \u0026#39;24588\u0026#39;, ## \u0026#39;sample_count\u0026#39;: \u0026#39;14249\u0026#39;, ## \u0026#39;status\u0026#39;: \u0026#39;live\u0026#39;, ## \u0026#39;study_type\u0026#39;: \u0026#39;Other\u0026#39;, ## \u0026#39;taxon_ids\u0026#39;: [\u0026#39;9606\u0026#39;], ## \u0026#39;title\u0026#39;: \u0026#39;Genotype-Tissue Expression (GTEx) Common Fund Project\u0026#39;, ## \u0026#39;total_bases\u0026#39;: \u0026#39;343115501734811\u0026#39;, ## \u0026#39;total_spots\u0026#39;: \u0026#39;1698588305124\u0026#39;} Each resource (SRA Sample, for example) has a particular data model that is shared across all members of that resource. However, different resources (SRA Sample vs SRA Study) will have different data models (though some fields are common) from one another. To get a sense of what other resources look like, try clicking through these links. For more details, see the data models for [SRA], [GEO], and [Biosample].\nAdditional examples include:\n https://api.omicidx.cancerdatasci.org/sra/samples/SRS357840 https://api.omicidx.cancerdatasci.org/sra/experiments/SRX178456 https://api.omicidx.cancerdatasci.org/sra/runs/SRR543404 https://api.omicidx.cancerdatasci.org/biosample/samples/SAMD00000001   Get records related to an accession Another common task is to find all the records of one type for a record of another type, e.g., all samples for a given study. For this section, we will make the workflow a bit more realistic. Mike Love routinely teaches about gene-level differential RNA-seq expression using the rnaseqGene Bioconductor workflow. After accessing the Bioconductor vignette, we note that the data used are from [@Himes2014-zj].\nTo find SRA links from a PubMed record, look at the Related Information section that will look like Figure 2. Clicking on the SRA link will reveal that thethe related SRA study is SRP033351. Reviewing the single-record access approach from the last section, this URL returns the details of the study.\n https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351   Figure 2: When viewing a PubMed abstract, the Related Information section may have link(s) out to omics databases. Clicking through on one of these links will reveal an accession that can be used for accessing OmicIDX  Fetching all related samples given this study (see the [SRA data model section][SRA] for how samples relate to a study) is straightforward and the URL again follows a pattern.\n https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/samples  The URLs for all related experiment and run records are, respectively:\n https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/experiments https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/runs  Here are additional examples of accessing related records:\n https://api.omicidx.cancerdatasci.org/sra/samples/SRS357840/experiments https://api.omicidx.cancerdatasci.org/sra/samples/SRS357840/runs https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/experiments https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/runs https://api.omicidx.cancerdatasci.org/sra/samples/SRS357840/experiments https://api.omicidx.cancerdatasci.org/sra/samples/SRS357840/runs    Counting and paging through results API accesses and queries may include many millions of records, but the OmicIDX REST API limits resultsets to batches of size \u0026lt;1000 records in a single call to the API. This section addresses:\nChoosing the number of results, or size, that are returned by each API call. Paging through very large resultsets in chunks using the cursor.  Adjusting the page size Adding a size parameter to the URL above modifies the default resultset size of 10 to be either smaller (down to zero) or larger (up to 999). An example URL including the size parameter looks like:\n https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/samples?size=2  # curl -s \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/samples?size=2\u0026#39; http \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/samples\u0026#39; \\ size==2 \\ --pretty format ## { ## \u0026quot;cursor\u0026quot;: \u0026quot;X2lkfHxhc2N8fHx8U1JTNTA4NTY4\u0026quot;, ## \u0026quot;hits\u0026quot;: [ ## { ## \u0026quot;BioSample\u0026quot;: \u0026quot;SAMN02422675\u0026quot;, ## \u0026quot;accession\u0026quot;: \u0026quot;SRS508567\u0026quot;, ## \u0026quot;alias\u0026quot;: \u0026quot;GSM1275863\u0026quot;, ## \u0026quot;attributes\u0026quot;: [ ## { ## \u0026quot;tag\u0026quot;: \u0026quot;source_name\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;airway smooth muscle cells\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;treatment\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;Dexamethasone\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;tissue\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;human airway smooth muscle cells\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;ercc_mix\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;-\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;cell line\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;N61311\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;cell type\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;airway smooth muscle cells\u0026quot; ## } ## ], ## \u0026quot;experiment_count\u0026quot;: \u0026quot;1\u0026quot;, ## \u0026quot;identifiers\u0026quot;: [ ## { ## \u0026quot;id\u0026quot;: \u0026quot;SAMN02422675\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;BioSample\u0026quot; ## }, ## { ## \u0026quot;id\u0026quot;: \u0026quot;GSM1275863\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;GEO\u0026quot; ## } ## ], ## \u0026quot;insdc\u0026quot;: true, ## \u0026quot;lastupdate\u0026quot;: \u0026quot;2014-11-07T22:00:54\u0026quot;, ## \u0026quot;mean_bases_per_run\u0026quot;: 2665619082, ## \u0026quot;organism\u0026quot;: \u0026quot;Homo sapiens\u0026quot;, ## \u0026quot;published\u0026quot;: \u0026quot;2014-01-01T05:49:37\u0026quot;, ## \u0026quot;received\u0026quot;: \u0026quot;2013-11-26T21:30:10\u0026quot;, ## \u0026quot;run_count\u0026quot;: \u0026quot;1\u0026quot;, ## \u0026quot;status\u0026quot;: \u0026quot;live\u0026quot;, ## \u0026quot;study\u0026quot;: { ## \u0026quot;BioProject\u0026quot;: \u0026quot;PRJNA229998\u0026quot;, ## \u0026quot;abstract\u0026quot;: \u0026quot;Rationale: Asthma is a chronic inflammatory airway disease. The most common medications used for its treatment are ß2-agonists and glucocorticosteroids, and one of the primary tissues that these drugs target in the treatment of asthma is the airway smooth muscle. We used RNA-Seq to characterize the human airway smooth muscle (HASM) transcriptome at baseline and under three asthma treatment conditions. Methods: The Illumina TruSeq assay was used to prepare 75bp paired-end libraries for HASM cells from four white male donors under four treatment conditions: 1) no treatment; 2) treatment with a ß2-agonist (i.e. Albuterol, 1µM for 18h); 3) treatment with a glucocorticosteroid (i.e. Dexamethasone (Dex), 1µM for 18h); 4) simultaneous treatment with a ß2-agonist and glucocorticoid, and the libraries were sequenced with an Illumina Hi-Seq 2000 instrument. The Tuxedo Suite Tools were used to align reads to the hg19 reference genome, assemble transcripts, and perform differential expression analysis using the protocol described in https://github.com/blancahimes/taffeta Overall design: mRNA profiles obtained via RNA-Seq for four primary human airway smooth muscle cell lines that were treated with dexamethasone, albuterol, dexamethasone+albuterol or were left untreated.\u0026quot;, ## \u0026quot;accession\u0026quot;: \u0026quot;SRP033351\u0026quot;, ## \u0026quot;alias\u0026quot;: \u0026quot;GSE52778\u0026quot;, ## \u0026quot;attributes\u0026quot;: [], ## \u0026quot;center_name\u0026quot;: \u0026quot;GEO\u0026quot;, ## \u0026quot;identifiers\u0026quot;: [ ## { ## \u0026quot;id\u0026quot;: \u0026quot;PRJNA229998\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;BioProject\u0026quot; ## }, ## { ## \u0026quot;id\u0026quot;: \u0026quot;GSE52778\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;GEO\u0026quot; ## } ## ], ## \u0026quot;insdc\u0026quot;: true, ## \u0026quot;lastupdate\u0026quot;: \u0026quot;2018-06-12T17:05:25\u0026quot;, ## \u0026quot;published\u0026quot;: \u0026quot;2014-01-02T14:16:11\u0026quot;, ## \u0026quot;pubmed_ids\u0026quot;: [ ## \u0026quot;24926665\u0026quot; ## ], ## \u0026quot;received\u0026quot;: \u0026quot;2013-11-26T21:29:11\u0026quot;, ## \u0026quot;status\u0026quot;: \u0026quot;live\u0026quot;, ## \u0026quot;study_type\u0026quot;: \u0026quot;Transcriptome Analysis\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;Human Airway Smooth Muscle Transcriptome Changes in Response to Asthma Medications\u0026quot; ## }, ## \u0026quot;taxon_id\u0026quot;: \u0026quot;9606\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;N61311_Dex\u0026quot;, ## \u0026quot;total_bases\u0026quot;: \u0026quot;2665619082\u0026quot;, ## \u0026quot;total_spots\u0026quot;: \u0026quot;21155707\u0026quot;, ## \u0026quot;xrefs\u0026quot;: [ ## { ## \u0026quot;db\u0026quot;: \u0026quot;bioproject\u0026quot;, ## \u0026quot;id\u0026quot;: \u0026quot;229998\u0026quot; ## } ## ] ## }, ## { ## \u0026quot;BioSample\u0026quot;: \u0026quot;SAMN02422669\u0026quot;, ## \u0026quot;accession\u0026quot;: \u0026quot;SRS508568\u0026quot;, ## \u0026quot;alias\u0026quot;: \u0026quot;GSM1275862\u0026quot;, ## \u0026quot;attributes\u0026quot;: [ ## { ## \u0026quot;tag\u0026quot;: \u0026quot;source_name\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;airway smooth muscle cells\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;treatment\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;Untreated\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;tissue\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;human airway smooth muscle cells\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;ercc_mix\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;-\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;cell line\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;N61311\u0026quot; ## }, ## { ## \u0026quot;tag\u0026quot;: \u0026quot;cell type\u0026quot;, ## \u0026quot;value\u0026quot;: \u0026quot;airway smooth muscle cells\u0026quot; ## } ## ], ## \u0026quot;experiment_count\u0026quot;: \u0026quot;1\u0026quot;, ## \u0026quot;identifiers\u0026quot;: [ ## { ## \u0026quot;id\u0026quot;: \u0026quot;SAMN02422669\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;BioSample\u0026quot; ## }, ## { ## \u0026quot;id\u0026quot;: \u0026quot;GSM1275862\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;GEO\u0026quot; ## } ## ], ## \u0026quot;insdc\u0026quot;: true, ## \u0026quot;lastupdate\u0026quot;: \u0026quot;2014-11-07T22:00:54\u0026quot;, ## \u0026quot;mean_bases_per_run\u0026quot;: 2889875646, ## \u0026quot;organism\u0026quot;: \u0026quot;Homo sapiens\u0026quot;, ## \u0026quot;published\u0026quot;: \u0026quot;2014-01-01T05:49:38\u0026quot;, ## \u0026quot;received\u0026quot;: \u0026quot;2013-11-26T21:30:11\u0026quot;, ## \u0026quot;run_count\u0026quot;: \u0026quot;1\u0026quot;, ## \u0026quot;status\u0026quot;: \u0026quot;live\u0026quot;, ## \u0026quot;study\u0026quot;: { ## \u0026quot;BioProject\u0026quot;: \u0026quot;PRJNA229998\u0026quot;, ## \u0026quot;abstract\u0026quot;: \u0026quot;Rationale: Asthma is a chronic inflammatory airway disease. The most common medications used for its treatment are ß2-agonists and glucocorticosteroids, and one of the primary tissues that these drugs target in the treatment of asthma is the airway smooth muscle. We used RNA-Seq to characterize the human airway smooth muscle (HASM) transcriptome at baseline and under three asthma treatment conditions. Methods: The Illumina TruSeq assay was used to prepare 75bp paired-end libraries for HASM cells from four white male donors under four treatment conditions: 1) no treatment; 2) treatment with a ß2-agonist (i.e. Albuterol, 1µM for 18h); 3) treatment with a glucocorticosteroid (i.e. Dexamethasone (Dex), 1µM for 18h); 4) simultaneous treatment with a ß2-agonist and glucocorticoid, and the libraries were sequenced with an Illumina Hi-Seq 2000 instrument. The Tuxedo Suite Tools were used to align reads to the hg19 reference genome, assemble transcripts, and perform differential expression analysis using the protocol described in https://github.com/blancahimes/taffeta Overall design: mRNA profiles obtained via RNA-Seq for four primary human airway smooth muscle cell lines that were treated with dexamethasone, albuterol, dexamethasone+albuterol or were left untreated.\u0026quot;, ## \u0026quot;accession\u0026quot;: \u0026quot;SRP033351\u0026quot;, ## \u0026quot;alias\u0026quot;: \u0026quot;GSE52778\u0026quot;, ## \u0026quot;attributes\u0026quot;: [], ## \u0026quot;center_name\u0026quot;: \u0026quot;GEO\u0026quot;, ## \u0026quot;identifiers\u0026quot;: [ ## { ## \u0026quot;id\u0026quot;: \u0026quot;PRJNA229998\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;BioProject\u0026quot; ## }, ## { ## \u0026quot;id\u0026quot;: \u0026quot;GSE52778\u0026quot;, ## \u0026quot;namespace\u0026quot;: \u0026quot;GEO\u0026quot; ## } ## ], ## \u0026quot;insdc\u0026quot;: true, ## \u0026quot;lastupdate\u0026quot;: \u0026quot;2018-06-12T17:05:25\u0026quot;, ## \u0026quot;published\u0026quot;: \u0026quot;2014-01-02T14:16:11\u0026quot;, ## \u0026quot;pubmed_ids\u0026quot;: [ ## \u0026quot;24926665\u0026quot; ## ], ## \u0026quot;received\u0026quot;: \u0026quot;2013-11-26T21:29:11\u0026quot;, ## \u0026quot;status\u0026quot;: \u0026quot;live\u0026quot;, ## \u0026quot;study_type\u0026quot;: \u0026quot;Transcriptome Analysis\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;Human Airway Smooth Muscle Transcriptome Changes in Response to Asthma Medications\u0026quot; ## }, ## \u0026quot;taxon_id\u0026quot;: \u0026quot;9606\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;N61311_untreated\u0026quot;, ## \u0026quot;total_bases\u0026quot;: \u0026quot;2889875646\u0026quot;, ## \u0026quot;total_spots\u0026quot;: \u0026quot;22935521\u0026quot;, ## \u0026quot;xrefs\u0026quot;: [ ## { ## \u0026quot;db\u0026quot;: \u0026quot;bioproject\u0026quot;, ## \u0026quot;id\u0026quot;: \u0026quot;229998\u0026quot; ## } ## ] ## } ## ], ## \u0026quot;stats\u0026quot;: { ## \u0026quot;took\u0026quot;: 2, ## \u0026quot;total\u0026quot;: 16 ## }, ## \u0026quot;success\u0026quot;: true ## } Using a size of zero (0) is useful to capture just the count of the number of records.\n# curl -s \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/samples?size=0\u0026#39; http \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP033351/samples\u0026#39; \\ size==0 \\ --pretty format ## { ## \u0026quot;cursor\u0026quot;: null, ## \u0026quot;hits\u0026quot;: [], ## \u0026quot;stats\u0026quot;: { ## \u0026quot;took\u0026quot;: 0, ## \u0026quot;total\u0026quot;: 16 ## }, ## \u0026quot;success\u0026quot;: true ## } Note that the stats.total part of the output gives the number 16. All data resultsets from the OmicIDX API will include this annotation, giving the total number of results available given the query or URL.\nAnother, larger study, such at GTeX (SRP015892) offers many more samples. But how many?\n# curl -s \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples?size=0\u0026#39; http \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples\u0026#39; \\ size==0 \\ --pretty format ## { ## \u0026quot;cursor\u0026quot;: null, ## \u0026quot;hits\u0026quot;: [], ## \u0026quot;stats\u0026quot;: { ## \u0026quot;took\u0026quot;: 0, ## \u0026quot;total\u0026quot;: 14249 ## }, ## \u0026quot;success\u0026quot;: true ## } Therefore, the size parameter varies the number of results returned by an API call. Using a size of zero (0) is a quick-and-dirty approach to get a count of the number of records that would be returned by an API call. This same trick can be used when counting search results below.\n Using the cursor to page through large result sets. The limitation on result set size is to mitigate problems with network connectivity and to simplify somewhat the database backend infrastructure. However, there are definitely result sets that are larger than 999 records. How do we deal with that situation?\nThe OmicIDX API uses paging. In particular, the API uses cursor-based paging. For each result set that the API returns, if more results are available, there will be a cursor field available that can be used as a parameter to the next API call to start with results after the cursor. Perhaps it is easier to explain with an example:\n# curl -s \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples?size=5\u0026#39; http \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples\u0026#39; \\ size==5 \\ --pretty format If you run the line above, the result will include a \u0026quot;cursor\u0026quot;: \u0026quot;LONG....STRING\u0026quot; that might look like the following (your cursor may be different).\n... ], \u0026quot;cursor\u0026quot;: \u0026quot;X2lkfHxhc2N8fHx8U1JTMTAxNzEzNw==\u0026quot;, \u0026quot;stats\u0026quot;: { \u0026quot;total\u0026quot;: 14249, \u0026quot;took\u0026quot;: 10 }, \u0026quot;success\u0026quot;: true } ... Adding the cursor as a parameter to the same URL retrieves the next 5 results like so:\n# curl -s \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples?size=5\u0026amp;cursor=X2lkfHxhc2N8fHx8U1JTMTAxNzEzNw==\u0026#39; http \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples\u0026#39; \\ size==5 \\ \u0026#39;cursor==X2lkfHxhc2N8fHx8U1JTMTAxNzEzNw==\u0026#39; \\ --pretty format The next cursor value will look similar (for example, “X2lkfHxhc2N8fHx8U1JTMTAxNzE0Mg==”). Continuing to play this game of specifying the cursor when it is available allows paging through the result set. When fetching results, the cursor will be available until there are no more results to be fetched. Thus, when there is not a cursor entry in the results, all results have been retrieved and any looping code can stop.\nNote a few assumptions/caveats here.\nThe size parameter dictates the number of results in one “page”. The cursor parameter is specific to the search or API query. Cursors cannot be reused across different queries. When calling the API, the query should remain fixed when paging with a cursor (ie., use the same URL over again, changing only the cursor value). Underlying the cursor functionality is a fixed sorting order (that is not currently a parameter that can be tweeked).    Customizing returned fields Listing available fields # curl -s \u0026#39;https://api.omicidx.cancerdatasci.org/_mapping/study\u0026#39; http \u0026#39;https://api.omicidx.cancerdatasci.org/_mapping/study\u0026#39; \\ --pretty format ## [ ## { ## \u0026quot;field\u0026quot;: \u0026quot;BioProject\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;abstract\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;accession\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;alias\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;attributes.tag\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;attributes.value\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;broker_name\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;center_name\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;description\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;experiment_count\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;identifiers.id\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: true, ## \u0026quot;path\u0026quot;: \u0026quot;identifiers\u0026quot;, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;identifiers.namespace\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: true, ## \u0026quot;path\u0026quot;: \u0026quot;identifiers\u0026quot;, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;insdc\u0026quot;, ## \u0026quot;keyword\u0026quot;: false, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;boolean\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;lastupdate\u0026quot;, ## \u0026quot;keyword\u0026quot;: false, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;date\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;mean_bases_per_run\u0026quot;, ## \u0026quot;keyword\u0026quot;: false, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;float\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;published\u0026quot;, ## \u0026quot;keyword\u0026quot;: false, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;date\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;pubmed_ids\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;received\u0026quot;, ## \u0026quot;keyword\u0026quot;: false, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;date\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;run_count\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;sample_count\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;status\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;study_type\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;taxon_ids\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;title\u0026quot;, ## \u0026quot;keyword\u0026quot;: true, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;total_bases\u0026quot;, ## \u0026quot;keyword\u0026quot;: false, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;long\u0026quot; ## }, ## { ## \u0026quot;field\u0026quot;: \u0026quot;total_spots\u0026quot;, ## \u0026quot;keyword\u0026quot;: false, ## \u0026quot;nested\u0026quot;: false, ## \u0026quot;type\u0026quot;: \u0026quot;long\u0026quot; ## } ## ]  Including or excluding specific fields from results # curl -s \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples?size=5\u0026amp;include_fields=accession\u0026amp;include_fields=title\u0026#39; http \u0026#39;https://api.omicidx.cancerdatasci.org/sra/studies/SRP012682/samples\u0026#39; \\ \u0026#39;size==5\u0026#39; \u0026#39;include_fields==accession\u0026#39; \\ \u0026#39;include_fields==title\u0026#39; \\ --pretty format ## { ## \u0026quot;cursor\u0026quot;: \u0026quot;X2lkfHxhc2N8fHx8U1JTMTAxNzEzNw==\u0026quot;, ## \u0026quot;hits\u0026quot;: [ ## { ## \u0026quot;accession\u0026quot;: \u0026quot;SRS1017133\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;Non-tumor RNA:Total RNA sample from Skin - Sun Exposed (Lower leg) of a human female participant in the dbGaP study \\\u0026quot;Genotype-Tissue Expression (GTEx)\\\u0026quot;\u0026quot; ## }, ## { ## \u0026quot;accession\u0026quot;: \u0026quot;SRS1017134\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;Non-tumor RNA:Total RNA sample from Testis of a human male participant in the dbGaP study \\\u0026quot;Genotype-Tissue Expression (GTEx)\\\u0026quot;\u0026quot; ## }, ## { ## \u0026quot;accession\u0026quot;: \u0026quot;SRS1017135\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;Non-tumor RNA:Total RNA sample from Thyroid of a human male participant in the dbGaP study \\\u0026quot;Genotype-Tissue Expression (GTEx)\\\u0026quot;\u0026quot; ## }, ## { ## \u0026quot;accession\u0026quot;: \u0026quot;SRS1017136\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;Non-tumor RNA:Total RNA sample from Thyroid of a human male participant in the dbGaP study \\\u0026quot;Genotype-Tissue Expression (GTEx)\\\u0026quot;\u0026quot; ## }, ## { ## \u0026quot;accession\u0026quot;: \u0026quot;SRS1017137\u0026quot;, ## \u0026quot;title\u0026quot;: \u0026quot;Non-tumor RNA:Total RNA sample from Stomach of a human male participant in the dbGaP study \\\u0026quot;Genotype-Tissue Expression (GTEx)\\\u0026quot;\u0026quot; ## } ## ], ## \u0026quot;stats\u0026quot;: { ## \u0026quot;took\u0026quot;: 11, ## \u0026quot;total\u0026quot;: 14249 ## }, ## \u0026quot;success\u0026quot;: true ## }   Search Decide what you want to search for: studies, samples, experiments, or runs. Take a look at the output of one of the API calls on the previous slide for the entity type you want to search for. Look closely at the field names and what is in them. Form the query using lucene query syntax. Form the URL based like so, using q= to specify the query string. For example, to find all human RNA-seq experiments:  https://api.omicidx.cancerdatasci.org/sra/experiments?q=library_strategy:\u0026quot;RNA-Seq\u0026quot; AND sample.taxon_id:9606\nThe number of records can be tuned using size=.... (up to 999 records).\n Aggregation and basic analytics   ","excerpt":"The REST API RESTful Concepts Before focusing on any jargon or getting hung up on semantics, in the …","ref":"/docs/rest-api/","title":""},{"body":"  #td-cover-block-0 { background-image: url(/about/featured-background_huecd58d056379c142f106ffb096c7e70a_221334_960x540_fill_q75_catmullrom_smart1.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/about/featured-background_huecd58d056379c142f106ffb096c7e70a_221334_1920x1080_fill_q75_catmullrom_smart1.jpg); } }  About Docsy Docsy is a pre-configured Hugo theme that provides the core features and behaviors needed to create a technical documentation site. Use Docsy to set up your documentation website, including an optional Blog section, and then spend your time focusing on authoring technical content. Depending on how you choose to configure Docsy and whether you use a hosting service that supports continuous builds, you can even just add your Markdown or HTML content file into a folder on your source repository, and then sit back while it automatically gets added to your site - complete with updated menus.\nRead on to find out more, or visit our documentation to get started!\n       So what’s a technical documentation site? A technical documentation site is a website that your users can visit to find the documentation for your technical project. Your documentation set contains all the information you think your users might need to engage with your project, from overviews that help them understand what the project is for, to instructions for specific tasks. Depending on the size of the project, a documentation set can be a page or two or an entire “book” with different types of information.\nMost users don’t want to have to spend much time looking at docs - they want to try your great project! So how do you make sure your technical documentation set gives users what they need to easily understand your project and get things done? We think a good technical documentation set should be:\n Reliable: Is it true? Comprehensive: Does it have all the information your target users might need? Well-organized and navigable: Can the user find the information they need? Are similar types of information (all the information about a feature, all your reference information) grouped together?  If you have users around the world, you might also want to provide your content in multiple languages, and if you have an open source project, you’ll probably want your users to be able to contribute to the docs.\nOnce you have your content, you use a technical documentation site to publish your technical documentation set online for your users. In addition to your documentation, your site might also contain material like contact information, a blog, or information about how to contribute to the project.\n     How does Docsy help? Particularly when working with open source projects, it can be difficult to figure out how to turn all your product knowledge into a website that helps and engages your users. Enter Docsy!\nDocsy gives you a theme for the Hugo static site generator, an established open source tool that builds ready-to-serve websites from a set of theme and content files. The Docsy theme provides you with useful stuff for a technical documentation site that isn’t your own content:\n  Page layouts optimized for different content types  Navigation, page menus, headers, landing pages, blog snippets, feedback links - you just provide the content.    Autogenerated navigation  Organize your docs in logical folders and get instantly updated navigation to help your users find them.    Language switchers  Builds on Hugo’s multi-language support to make it easy to create a site in multiple languages.    Feedback, contribution, and contact links  Let your users file issues and edit docs with a single click, or follow contact links to join you on Slack, Twitter, or mailing lists.    Custom shortcodes  Reusable snippets of HTML you can use to create alerts, image boxes, landing page blocks, and more.    Easy customization  Use the theme as-is for a basic, clean design, or update a file or two to get your own look.    Simple previews and deployment  Because Docsy is a Hugo theme, you get all the advantages of building with Hugo - simple, fast local previews, and, depending on your deployment options, continuous deployment from Github or other Git providers.    Simple authoring and publishing Author your content in the Markdown or HTML and then immediately test it with Hugo's local server. Once you are ready to publish, add that content to your project and deploy it to your site using any of Hugo’s supported options. Learn more\u0026hellip;\nBuilt-in integration with common tools The Docsy template currently includes built-in integration with the following tools:\n GitHub: Get in-page links directly to your GitHub repo and provide your users with a convenient pathway to providing feedback, opening issues, and even suggesting changes through Pull Requests. Google Analytics: Easily connect your Google Analytics account to your site. Google Custom Search: Use Google Custom Search for in-site search queries, or configure your site to search the web. Algolia DocSearch: Let your users search your site with Algolia DocSearch. Lunr: Local indexing and search for your site without the need for external search services.  Make it your own You can configure the Docsy theme as much or as little as you like, anything from changing the colours and images to adding your own type of page layout. Learn more\u0026hellip;\nGet organized We believe a well-organized documentation set can really help your users find the information they need, when they need it - whether it’s a “Hello World” tutorial when they’re starting out or a single core task they need to do to finish a complicated app. We also believe that having well-organized docs help you create comprehensive docs, as it’s easier to see when you’re missing something important. Learn more\u0026hellip;\nDocsy also provides autogenerated site navigation based on how you organize your source files, so once you’ve organized your docs in folders in Github or other source control, you’ve got menus for your users to quickly reach the doc they need. Learn more\u0026hellip;\nKeep up to date Spend time setting up your technical documentation site once, and then focus on what you do best. We work closely with the Hugo team and have individuals actively maintaining the Docsy theme. You can easily get and apply Docsy updates to your site, as well as open feature requests to improve the template, or even add new behaviors. Learn more\u0026hellip;\nFocus on great content Because Docsy helps you create and serve a well-organized, navigable technical documentation set, it frees you up to create and maintain great reliable, comprehensive content that your users can enjoy and trust.\n    What's next for Docsy? Docsy is an open source project and we love getting patches and contributions to make Docsy and its docs even better. We hope to continue to make improvements to the theme along with the Docsy community.\nVisit our Issues to see what we're currently working on. If there's something you'd like to see in Docsy, please create an issue yourself - or assign yourself an issue if you'd like to fix or add something! See our contribution guidelines for more information.\nYou can find out how to update your site to the latest version of Docsy in Keeping the theme up to date.\n   ","excerpt":"#td-cover-block-0 { background-image: …","ref":"/about/","title":"About Docsy"},{"body":"","excerpt":"","ref":"/community/","title":"Community"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_3194014_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_3194014_1920x1080_fill_q75_catmullrom_top.jpg); } }  Welcome to Docsy! Learn More   Code   Documentation   Omics metadata for query, \n       Docsy is a theme for the Hugo static site generator that's specifically designed for technical documentation sets. Our aim is to help you get a working documentation site up and running as easily as possible, so you can concentrate on creating great content for your users.       See Docsy in action! As well as our example site, there's a growing number of projects using Docsy for their doc sites.\nRead more …\n   Contributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\n   Follow us on Twitter! Find out about new features and how our users are using Docsy.\nRead more …\n    ","excerpt":"#td-cover-block-0 { background-image: …","ref":"/","title":"Docsy"},{"body":"Welcome to the Docsy theme user guide! This guide shows you how to get started creating technical documentation sites using Docsy, including site customization and how to use Docsy's blocks and templates.\nWhat is Docsy? Docsy is a theme for the Hugo static site generator that's specifically designed for technical documentation sets and has a lot of best practices built in. Use Docsy to get a working and reliable documentation site up and running fast, and then get back to focusing on great content for your users. Learn more about Docsy.\nIn addition to the theme itself, we provide an example site that uses lots of Docsy features and has a useful skeleton site structure (with advice for what to put in it!) for a large technical documentation set. You can copy the entire site and edit it for your own projects, or just explore the site and its source to see what Docsy can do. The site you're currently reading also uses Docsy and is a useful example of a smaller Docsy docset: feel free to copy it or borrow from it if it suits your needs better than the \u0026ldquo;big\u0026rdquo; example.\nDocsy itself does not provide:\n Source hosting and management: Our theme and site source files live on GitHub, which is the simplest approach for most projects. However, you can also keep your project files in GitLab, BitBucket, locally, or wherever you like. Be aware that where your source files live may affect the Docsy features you can use (such as letting users file documentation issues) and site deployment options. Site deployment: You can find out about deployment options in Previews and Deployment. This site uses Netlify.  Docsy also doesn't actually generate your site's HTML files: that's Hugo's job! Hugo takes your Markdown or HTML doc source files and Docsy's theme files and builds them into a static site for deployment. You can find out more about Hugo and how it works in the Hugo documentation.\nIs Docsy for me? Docsy is particularly useful for medium to large technical documentation sets with 20+ pages of docs and/or multiple types of docs and pages: tutorials, reference documentation, blog posts, community pages, and so on.\nIf you have a smaller project with only a couple of pages of documentation and hence simpler navigation needs, Docsy may be too heavyweight a solution for you. Instead, consider:\n A simpler Hugo or Jekyll theme: find out what's available in Github Pages\u0026rsquo; built-in Jekyll options and the Hugo theme gallery. A good README file that tells users what your project does and links to some examples.  If you have a very large documentation project, our example site structure may not be sufficient either, though you can still use our theme, possibly with heavier customization.\nIf you'd like to use Docsy's layouts but prefer to use Jekyll, vsoch has created a Docsy Jekyll port that includes many of Docsy's features (though as this is a separate project it won't be automatically updated along with Docsy).\nReady to get started? Find out how to build and serve your first site in Getting Started. Or visit the example site and its repo and start exploring!\n","excerpt":"Welcome to the Docsy theme user guide! This guide shows you how to get started creating technical …","ref":"/docs/","title":"Welcome to Docsy"},{"body":"","excerpt":"","ref":"/search/","title":"Search Results"}]